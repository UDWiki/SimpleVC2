<?xml version="1.0"?>
<doc>
    <assembly>
        <name>SGLibrary.Pub</name>
    </assembly>
    <members>
        <member name="M:SGLibrary.Framework.ORM.IOrmPlanar`1.Add(`0)">
            <summary>
            自动生成的Id会回写入value
            </summary>
        </member>
        <member name="M:SGLibrary.Framework.ORM.IOrmPlanar`1.Add_List(System.Collections.Generic.IList{`0})">
            <summary>
            自动生成的Id会回写入values
            可能部分成功，会跳过null
            </summary>
        </member>
        <member name="M:SGLibrary.Framework.ORM.IOrmPlanar`1.Delete_List(System.Collections.Generic.IList{`0})">
            <summary>
            会跳过null
            </summary>
        </member>
        <member name="M:SGLibrary.Framework.ORM.IOrmPlanar`1.Delete_Where(SGLibrary.Framework.Criterion.WhereList)">
            <summary>
            指定null不删除任何
            当前实现当有外连接时多表联合删除有潜在问题的！！！
            </summary>
        </member>
        <member name="M:SGLibrary.Framework.ORM.IOrmPlanar`1.Update_List(System.Collections.Generic.IList{`0},System.String[])">
            <summary>
            可能部分成功，会跳过null
            </summary>
        </member>
        <member name="M:SGLibrary.Framework.ORM.IOrmPlanar`1.GetEntity_Where(SGLibrary.Framework.Criterion.WhereList,System.Collections.Generic.IList{SGLibrary.Framework.Criterion.OrderNode})">
            <summary>
            无符合条件的返回null，否则返回第一个
            </summary>
        </member>
        <member name="M:SGLibrary.Framework.ORM.IOrmPlanar`1.Query_Property(SGLibrary.Framework.Criterion.WhereList,System.Collections.Generic.IList{SGLibrary.Framework.Criterion.OrderNode},System.String[])">
            <summary>
            只返回对应的属性
            </summary>
        </member>
        <member name="M:SGLibrary.Framework.ORM.IOrmPlanar`1.Query_Paging(SGLibrary.Framework.Criterion.WhereList,System.Collections.Generic.IList{SGLibrary.Framework.Criterion.OrderNode},System.Int32,System.Int32)">
            <summary>
            分页查询，注意pageIndex 0起点
            </summary>
        </member>
        <member name="P:SGLibrary.Framework.ORM.IOrmPlanar`1.Field">
            <summary>
            属性转换为字段名
            </summary>
        </member>
        <member name="M:SGLibrary.Framework.ORM.OrmPlanar`1.AddPara(System.Collections.Generic.IList{SGLibrary.Extend.KeyValue{System.String,System.Object}},System.Object,SGLibrary.Framework.ORM.OrmInfoAndPropertyMap)">
            <summary>
            当字符串超过长度，则返回Exception
            </summary>
        </member>
        <member name="M:SGLibrary.Framework.ORM.OrmPlanar`1.BuildWhereStr(SGLibrary.Framework.Criterion.WhereList,System.Collections.Generic.IList{SGLibrary.Extend.KeyValue{System.String,System.Object}})">
            <summary>
            要处理数据库类型
            </summary>
        </member>
        <member name="M:SGLibrary.Framework.ORM.OrmPlanar`1.GetQuerySql">
            <summary>
             无select
            </summary>
        </member>
        <member name="M:SGLibrary.Framework.ORM.OrmPlanar`1.GetQuerySql(System.Collections.Generic.IList{System.String})">
            <summary>
             无select, 只包含properties的属性(为空则全部)
            </summary>
        </member>
        <member name="M:SGLibrary.Framework.ORM.OrmPlanar`1.Query_Property(SGLibrary.Framework.Criterion.WhereList,System.Collections.Generic.IList{SGLibrary.Framework.Criterion.OrderNode},System.String[])">
            <summary>
            只返回对应的属性
            </summary>
        </member>
        <member name="M:SGLibrary.Framework.ORM.OrmPlanar`1.Delete_Where(SGLibrary.Framework.Criterion.WhereList)">
            <summary>
            指定null不删除任何
            当前实现当有外连接时多表联合删除有潜在问题的！！！
            </summary>
        </member>
        <member name="M:SGLibrary.Framework.ORM.OrmPlanar`1.Add(`0)">
            <summary>
            自动生成的Id会回写入value
            </summary>
        </member>
        <member name="M:SGLibrary.Framework.ORM.OrmPlanar`1.Add_List(System.Collections.Generic.IList{`0})">
            <summary>
            自动生成的Id会回写入values
            </summary>
        </member>
        <member name="M:SGLibrary.Framework.ORM.OrmPlanar`1.Update_Where(SGLibrary.Framework.Criterion.WhereList,SGLibrary.Extend.KeyValue{System.String,System.Object}[])">
            <summary>
            注意不支持连接表的查询条件
            </summary>
        </member>
        <member name="M:SGLibrary.Framework.ORM.OrmPlanar`1.TryCreateTable(System.Text.StringBuilder)">
            <summary>
            会与数据库类型相关
            </summary>
        </member>
        <member name="T:SGLibrary.Framework.GridBind.WinForm.GridViewBind`1">
            <summary>
            仅为了提供更方便的构造函数
            </summary>
            <summary>
            这个版本支持冻结
            </summary>
        </member>
        <member name="T:SGLibrary.Framework.GridBind.WinForm.GridBindBase`1">
            <summary>
            这个版本支持冻结
            </summary>
        </member>
        <member name="M:SGLibrary.Framework.GridBind.WinForm.GridBindBase`1.InitColumns">
            <summary>
            使用ColumnMng初始化表格
            </summary>
        </member>
        <member name="M:SGLibrary.Framework.GridBind.WinForm.GridBindBase`1.Binding(System.Collections.Generic.IList{`0})">
            <summary>
            在窗体的Load事件中调用Binding方法将导致表格定制不能正确恢复，原因未知
            </summary>
        </member>
        <member name="M:SGLibrary.Framework.GridBind.WinForm.GridBindBase`1.Binding(System.Collections.Generic.IList{`0},System.String)">
            <summary>
            在窗体的Load事件中调用Binding方法将导致表格定制不能正确恢复，原因未知
            </summary>
        </member>
        <member name="P:SGLibrary.Framework.GridBind.WinForm.GridBindBase`1.Comparison">
            <summary>
            对象比较器
            </summary>
        </member>
        <member name="M:SGLibrary.Framework.GridBind.WinForm.IGridViewBind`1.PositionTo(`0)">
            <summary>
            获取或设置列表中的位置
            </summary>
        </member>
        <member name="M:SGLibrary.Framework.GridBind.WinForm.IGridViewBind`1.SelectedAll">
            <summary>
            选择所有
            </summary>
        </member>
        <member name="M:SGLibrary.Framework.GridBind.WinForm.IGridViewBind`1.ClearSelection">
            <summary>
            取消所有的选择
            </summary>
        </member>
        <member name="M:SGLibrary.Framework.GridBind.WinForm.IGridViewBind`1.Binding(System.Collections.Generic.IList{`0},System.String)">
            <param name="dataSourceName">导出时作为默认文件名</param>
        </member>
        <member name="M:SGLibrary.Framework.GridBind.WinForm.IGridViewBind`1.Clear">
            <summary>
            清除所有绑定对象
            </summary>
        </member>
        <member name="P:SGLibrary.Framework.GridBind.WinForm.IGridViewBind`1.Count">
            <summary>
            行数量
            </summary>
        </member>
        <member name="E:SGLibrary.Framework.GridBind.WinForm.IGridViewBind`1.CountChanged">
            <summary>
            行数量变动
            </summary>
        </member>
        <member name="P:SGLibrary.Framework.GridBind.WinForm.IGridViewBind`1.Position">
            <summary>
            获取或设置列表中的位置
            </summary>
        </member>
        <member name="P:SGLibrary.Framework.GridBind.WinForm.IGridViewBind`1.IsTop">
            <summary>
            当前行为顶行
            </summary>
        </member>
        <member name="P:SGLibrary.Framework.GridBind.WinForm.IGridViewBind`1.IsEnd">
            <summary>
            当前行为底行
            </summary>
        </member>
        <member name="P:SGLibrary.Framework.GridBind.WinForm.IGridViewBind`1.IsOnlyOneSelect">
            <summary>
            当前仅选中一个行
            </summary>
        </member>
        <member name="P:SGLibrary.Framework.GridBind.WinForm.IGridViewBind`1.HasSelected">
            <summary>
            有选中行
            </summary>
        </member>
        <member name="P:SGLibrary.Framework.GridBind.WinForm.IGridViewBind`1.Current">
            <summary>
            获取或设置列表中的当前项
            </summary>
        </member>
        <member name="P:SGLibrary.Framework.GridBind.WinForm.IGridViewBind`1.CurrentSelect">
            <summary>
            当前所选(Current总是存在，但不一定被选择)
            </summary>
        </member>
        <member name="P:SGLibrary.Framework.GridBind.WinForm.IGridViewBind`1.SelectedObjects">
            <summary>
            所选择的数据
            </summary>
        </member>
        <member name="M:SGLibrary.Framework.GridBind.WinForm.GridViewBind`1.#ctor(System.Windows.Forms.DataGridView,SGLibrary.Framework.Config.IConfig,SGLibrary.Framework.GridBind.IBindToExcel,System.Int32,SGLibrary.Framework.GridBind.IGridBindColumnMng)">
            <summary>
            Load中装载数据将导致表格记忆的错误，请放在Shown中
            new GridBindColumnMngImplV1(new AttributeProviderOrmProperty2GridBindColumn(),
              new AttributeProviderExcelColumn2GridBindColumn())
              
            new GridBindColumnMngImpl_Appoint(params GridBindColumnAndPropertyMap[] columnProperties)
            </summary>
        </member>
        <member name="M:SGLibrary.Framework.GridBind.WinForm.GridViewBind`1.SelectedAll">
            <summary>
            选择所有
            </summary>
        </member>
        <member name="M:SGLibrary.Framework.GridBind.WinForm.GridViewBind`1.ClearSelection">
            <summary>
            取消所有的选择
            </summary>
        </member>
        <member name="M:SGLibrary.Framework.GridBind.WinForm.GridViewBind`1.Clear">
            <summary>
            清除所有绑定对象
            </summary>
        </member>
        <member name="P:SGLibrary.Framework.GridBind.WinForm.GridViewBind`1.Current">
            <summary>
            获取或设置列表中的当前项
            </summary>
        </member>
        <member name="P:SGLibrary.Framework.GridBind.WinForm.GridViewBind`1.CurrentSelect">
            <summary>
            当前所选(Current总是存在，但不一定被选则)
            </summary>
        </member>
        <member name="P:SGLibrary.Framework.GridBind.WinForm.GridViewBind`1.Position">
            <summary>
            获取或设置列表中的位置
            </summary>
        </member>
        <member name="P:SGLibrary.Framework.GridBind.WinForm.GridViewBind`1.IsOnlyOneSelect">
            <summary>
            当前仅选中一个行
            </summary>
        </member>
        <member name="P:SGLibrary.Framework.GridBind.WinForm.GridViewBind`1.HasSelected">
            <summary>
            有选中行
            </summary>
        </member>
        <member name="P:SGLibrary.Framework.GridBind.WinForm.GridViewBind`1.SelectedObjects">
            <summary>
            获取、设置选中的对象
            </summary>
        </member>
        <member name="T:SGLibrary.Framework.Criterion.WhereCtlCodeCb_Guid">
            <summary>
            Guid代码查询条件，Guid代码不可为Guid.Empty
            </summary>
        </member>
        <member name="T:SGLibrary.Framework.Criterion.WhereControlBase">
            <summary>
            查询条件基类
            </summary>
        </member>
        <member name="F:SGLibrary.Framework.Criterion.WhereControlBase.components">
            <summary> 
            Required designer variable.
            </summary>
        </member>
        <member name="M:SGLibrary.Framework.Criterion.WhereControlBase.Dispose(System.Boolean)">
            <summary> 
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:SGLibrary.Framework.Criterion.WhereControlBase.InitializeComponent">
            <summary> 
            Required method for Designer support - do not modify 
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="E:SGLibrary.Framework.Criterion.WhereControlBase.WhereChanged">
            <summary>
            查询条件改变
            </summary>
        </member>
        <member name="F:SGLibrary.Framework.Criterion.WhereCtlCodeCb_Guid.components">
            <summary> 
            Required designer variable.
            </summary>
        </member>
        <member name="M:SGLibrary.Framework.Criterion.WhereCtlCodeCb_Guid.Dispose(System.Boolean)">
            <summary> 
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:SGLibrary.Framework.Criterion.WhereCtlCodeCb_Guid.InitializeComponent">
            <summary> 
            Required method for Designer support - do not modify 
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="T:SGLibrary.Framework.Criterion.WhereNodeIntIn">
            <summary>
            整数In查询条件
            </summary>
        </member>
        <member name="M:SGLibrary.Framework.Criterion.ISqlWhereProvider.GetSqlWhere(SGLibrary.Extend.DB.IDbDialect,SGLibrary.Framework.Criterion.DlgBindToFieldName,System.Collections.Generic.IList{SGLibrary.Extend.KeyValue{System.String,System.Object}})">
            <summary>
            bindToFieldName == null直接使用bind
            </summary>
        </member>
        <member name="P:SGLibrary.Framework.Criterion.IWhereNode.Bind">
            <summary>
            绑定的属性名
            </summary>
        </member>
        <member name="M:SGLibrary.Framework.Criterion.WhereNodeIntIn.#ctor(System.String,System.Int64[])">
            <summary>
            At values
            </summary>
        </member>
        <member name="M:SGLibrary.Framework.Criterion.WhereNodeIntIn.#ctor(System.String,System.Collections.Generic.IEnumerable{System.Int64})">
            <summary>
            At values
            </summary>
        </member>
        <member name="P:SGLibrary.Framework.Criterion.WhereNodeIntIn.Compare">
            <summary>
            比较符
            </summary>
        </member>
        <member name="T:SGLibrary.Framework.Criterion.WhereNodeFalse">
            <summary>
            全否条件，会生成一个1=2节
            </summary>
        </member>
        <member name="T:SGLibrary.Framework.Config.IConfig">
            <summary>
            用来处理系统中可有可无的配置项，如窗体记忆、用户自定义的一些风格等
            通用的配置，section不会被编码，注意提供合法标识
            Load方法，如果没有配置项会创建，注意remark不会被编码
            remark不会被单独更新
            </summary>
        </member>
        <member name="M:SGLibrary.Framework.Config.IConfig.ListConfigItems">
            <summary>
            返回null: 不支持预装载
            </summary>
        </member>
        <member name="F:TestHttpPost.FrmTestHttpPost.components">
            <summary>
            必需的设计器变量。
            </summary>
        </member>
        <member name="M:TestHttpPost.FrmTestHttpPost.Dispose(System.Boolean)">
            <summary>
            清理所有正在使用的资源。
            </summary>
            <param name="disposing">如果应释放托管资源，为 true；否则为 false。</param>
        </member>
        <member name="M:TestHttpPost.FrmTestHttpPost.InitializeComponent">
            <summary>
            设计器支持所需的方法 - 不要
            使用代码编辑器修改此方法的内容。
            </summary>
        </member>
        <member name="M:TestHttpPost.FrmTestHttpPost.Encoding_FromBodyName(System.String)">
            <summary>
            根据BodyName创建Encoding对象。
            </summary>
            <param name="bodyname">与邮件代理正文标记一起使用的当前编码的名称。</param>
            <returns>返回Encoding对象。若没有匹配的BodyName，便返回null。</returns>
        </member>
        <member name="M:TestHttpPost.FrmTestHttpPost.OutLog(System.String)">
            <summary>
            输出日志文本.
            </summary>
            <param name="s">日志文本</param>
        </member>
        <member name="M:SGLibrary.Extend.ExString.ToUniform(System.Object,System.Int32)">
            <summary>
               字符串长度规格化, 不会截断，所有可能超过期望的长度
               不足右侧填充空格
            </summary>
        </member>
        <member name="M:SGLibrary.Extend.ExString.ToUniform(System.Object,System.Int32,System.Char)">
            <summary>
               字符串长度规格化, 不会截断，所有可能超过期望的长度
               不足右侧填充C
            </summary>
        </member>
        <member name="M:SGLibrary.Extend.ExString.ToUniform_LFill_Tough(System.Object,System.Int32,System.Char)">
            <summary>
               字符串长度规格化, 过长的会被截断
               不足左侧填充C
            </summary>
        </member>
        <member name="M:SGLibrary.Extend.ExString.ToUniform_LFill(System.Object,System.Int32,System.Char)">
            <summary>
               字符串长度规格化, 不会截断，所有可能超过期望的长度
               不足左侧填充C
            </summary>
        </member>
        <member name="M:SGLibrary.Extend.ExString.ReplaceLast(System.String,System.String,System.String)">
            <summary>
               替换后缀，后缀不必等长。
               靠AttachMark向左侧识别，Last中最好不出现AttachMark
            </summary>
        </member>
        <member name="M:SGLibrary.Extend.ExString.ReplaceLastUniform(System.String,System.String,System.String)">
            <summary>
               替换后缀，后缀必须等长。
               通常用在SaveAs中，后缀为表示时间的串
               ReplaceStringLast("我的工作_061123", "_", "071209") = "我的工作_071209"
            </summary>
        </member>
        <member name="M:SGLibrary.Extend.ExString.SafeSubstring(System.String,System.Int32)">
            <summary>
               安全的子字符串，尽力而为且不会返回null
            </summary>
        </member>
        <member name="M:SGLibrary.Extend.ExString.SafeSubstring(System.String,System.Int32,System.Int32)">
            <summary>
               安全的子字符串，尽力而为且不会返回null
            </summary>
        </member>
        <member name="M:SGLibrary.Extend.ExString.StringListToUpper(System.Collections.Generic.IList{System.String})">
            <summary>
                将StringList的所有成员ToUpper
            </summary>
        </member>
        <member name="M:SGLibrary.Extend.ExString.StringListToLower(System.Collections.Generic.IList{System.String})">
            <summary>
                将StringList的所有成员ToLower
            </summary>
        </member>
        <member name="M:SGLibrary.Extend.ExString.Cut(System.String@,System.Int32)">
            <summary>
            从strValue剪下前Len个字符
            </summary>
        </member>
        <member name="M:SGLibrary.Extend.ExString.Cut(System.String@,System.String)">
            <summary>
            从strValue剪下第一个p前的部分，strValue保留剩余的（不包括第一个p）
            </summary>
        </member>
        <member name="M:SGLibrary.Extend.ExString.CutNumberStr(System.String@)">
            <summary>
            从strValue剪下前面的数值部分，strValue保留剩余的
            11aa22: 11/aa22; aa11: null/aa11 
            </summary>
        </member>
        <member name="M:SGLibrary.Extend.ExString.CutFirstNumberStr(System.String@)">
            <summary>
            从strValue剪下第一组出现的数值部分，strValue保留后面剩余的
            11aa22: 11/aa22; aa11: 11/null
            </summary>
        </member>
        <member name="M:SGLibrary.Extend.ExString.WSStringToWinString(System.String)">
            <summary>
            WebService返回的字符串都是以\n换行的，转换成\r\n
            </summary>
        </member>
        <member name="M:SGLibrary.Extend.ExString.Format(System.String,System.Object[])">
            <summary>
            String.Format的format存在'{'、'}'时会报错的
            </summary>
        </member>
        <member name="M:SGLibrary.Extend.ExString.Combination(System.String,System.String[])">
            <summary>
            组合之，如将Id组合成"1,2,3"
            </summary>
        </member>
        <member name="M:SGLibrary.Extend.ExString.Combination``1(System.String,System.Collections.Generic.IEnumerable{``0})">
            <summary>
            组合之，如将Id组合成"1,2,3"
            </summary>
        </member>
        <member name="M:SGLibrary.Extend.ExString.Combination``1(System.String,System.Collections.Generic.IEnumerable{``0},SGLibrary.Extend.Func{``0,System.String})">
            <summary>
            组合之，如将Id组合成"1,2,3"
            </summary>
        </member>
        <member name="M:SGLibrary.Extend.ExString.ToHafeCharString(System.String)">
            <summary>
            把字符串中的全角转换为半角，查表
            </summary>
        </member>
        <member name="M:SGLibrary.Extend.ExString.ToHafeCharString2(System.String)">
            <summary>
            把字符串中的全角转换为半角，假设是有序的
            </summary>
        </member>
        <member name="M:SGLibrary.Extend.ExString.ChangeStrToSBC(System.String)">
            <summary>
            把字母,数字由半角转化为全角
            </summary>
        </member>
        <member name="M:SGLibrary.Extend.ExString.ChangeStrToDBC(System.String)">
            <summary>
            将字母，数字由全角转化为半角，value可以为null
            </summary>
        </member>
        <member name="T:SGLibrary.Extend.ExEnum">
            <summary>
            枚举类型处理
            </summary>
        </member>
        <member name="M:SGLibrary.Extend.ExEnum.GetMax``1">
            <summary>
            获取所定义的枚举成员的最大值
            </summary>
        </member>
        <member name="M:SGLibrary.Extend.ExEnum.GetMin``1">
            <summary>
            获取所定义的枚举成员的最小值
            </summary>
        </member>
        <member name="M:SGLibrary.Extend.ExEnum.TryGetValue``1(System.String,``0)">
            <summary>
            将枚举成员的字面串转换回枚举值, strValue为null也返回defaultValue
            优先次序：定义的标识符、DescriptionAttribute定义的描述、有效的数值
            </summary>
        </member>
        <member name="M:SGLibrary.Extend.ExEnum.GetDescription``1(``0)">
            <summary>
            读取枚举类型元素用DescriptionAttribute定义的描述信息，将建立并利用缓冲    
            </summary>
        </member>
        <member name="M:SGLibrary.Extend.ExEnum.ListDescription``1(``0[])">
            <summary>
            列举枚举元素用DescriptionAttribute定义的描述信息
            适合于供下拉列表选择
            </summary>
        </member>
        <member name="M:SGLibrary.Extend.ExEnum.GetDescriptionList``1(``0[])">
            <summary>
            获取枚举元素用DescriptionAttribute定义的描述信息列表
            </summary>
        </member>
        <member name="M:SGLibrary.Extend.ExEnum.EnumItemDict`1.TryGetValue(System.String,`0)">
            <summary>
            优先次序：定义的标识符、DescriptionAttribute定义的描述、有效的数值
            </summary>
        </member>
        <member name="T:SGLibrary.Extend.DB.IDbDialect">
            <summary>
             处理DB之差异
            </summary>
        </member>
        <member name="T:SGLibrary.Extend.DB.DbDialectProvider">
            <summary>
             处理DB之差异
            </summary>
        </member>
        <member name="P:SGLibrary.Extend.DB.DbDialectProvider.DbDialect_Access.ParaPrefix">
            <summary>
            Access.ParaPrefix 使用:/@都可以
            </summary>
        </member>
        <member name="P:SGLibrary.Extend.DB.DbDialectProvider.DbDialect_Oracle.ParaPrefix">
            <summary>
            Access.ParaPrefix 使用:/@都可以
            </summary>
        </member>
        <member name="F:SGLibrary.Extend.ControlEx.ShowStrFm.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:SGLibrary.Extend.ControlEx.ShowStrFm.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:SGLibrary.Extend.ControlEx.ShowStrFm.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="T:SGLibrary.Extend.ControlEx.ShadowButtonGroup">
            <summary>
            带阴影的按钮组
            </summary>
        </member>
        <member name="F:SGLibrary.Extend.ControlEx.ShadowButtonGroup.components">
            <summary> 
            Required designer variable.
            </summary>
        </member>
        <member name="M:SGLibrary.Extend.ControlEx.ShadowButtonGroup.Dispose(System.Boolean)">
            <summary> 
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:SGLibrary.Extend.ControlEx.ShadowButtonGroup.InitializeComponent">
            <summary> 
            Required method for Designer support - do not modify 
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="T:SGLibrary.Extend.SGLinq">
            <summary>
            当SGPub限制为.Net 2.0时代用Linq的方法
            偏执狂！
            </summary>
        </member>
        <member name="M:SGLibrary.Extend.SGLinq.Where``1(System.Collections.Generic.IEnumerable{``0},SGLibrary.Extend.Func{``0,System.Boolean})">
            <summary>
            source不可为null
            </summary>
        </member>
        <member name="M:SGLibrary.Extend.SGLinq.Select``2(System.Collections.Generic.IEnumerable{``0},SGLibrary.Extend.Func{``0,``1})">
            <summary>
            source不可为null
            </summary>
        </member>
        <member name="M:SGLibrary.Extend.SGLinq.Select``2(System.Collections.Generic.IEnumerable{``0},SGLibrary.Extend.Func{``0,System.Boolean},SGLibrary.Extend.Func{``0,``1})">
            <summary>
            条件选择, source不可为null
            </summary>
        </member>
        <member name="M:SGLibrary.Extend.SGLinq.FirstOrDefault``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            source不可为null
            </summary>
        </member>
        <member name="M:SGLibrary.Extend.SGLinq.FirstOrDefault``1(System.Collections.Generic.IEnumerable{``0},SGLibrary.Extend.Func{``0,System.Boolean})">
            <summary>
            source不可为null
            </summary>
        </member>
        <member name="M:SGLibrary.Extend.SGLinq.First``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            source不可为null
            </summary>
        </member>
        <member name="M:SGLibrary.Extend.SGLinq.First``1(System.Collections.Generic.IEnumerable{``0},SGLibrary.Extend.Func{``0,System.Boolean})">
            <summary>
            source不可为null
            </summary>
        </member>
        <member name="M:SGLibrary.Extend.SGLinq.FirstOrDefault(System.Collections.ICollection,SGLibrary.Extend.Func{System.Object,System.Boolean})">
            <summary>
            source不可为null
            </summary>
        </member>
        <member name="M:SGLibrary.Extend.SGLinq.First(System.Collections.ICollection,SGLibrary.Extend.Func{System.Object,System.Boolean})">
            <summary>
            source不可为null
            </summary>
        </member>
        <member name="M:SGLibrary.Extend.SGLinq.Any``1(System.Collections.Generic.IEnumerable{``0},SGLibrary.Extend.Func{``0,System.Boolean})">
            <summary>
            source不可为null
            </summary>
        </member>
        <member name="M:SGLibrary.Extend.SGLinq.IndexOf``1(System.Collections.Generic.IEnumerable{``0},SGLibrary.Extend.Func{``0,System.Boolean})">
            <summary>
            source不可为null
            </summary>
        </member>
        <member name="M:SGLibrary.Extend.SGLinq.ToDictionary``2(System.Collections.Generic.IEnumerable{``1},SGLibrary.Extend.Func{``1,``0})">
            <summary>
            转成字典，null返回null，不可以有重复的Key
            </summary>
        </member>
        <member name="M:SGLibrary.Extend.SGLinq.TryToDictionary``2(System.Collections.Generic.IEnumerable{``1},SGLibrary.Extend.Func{``1,``0})">
            <summary>
            尝试转成字典，null则返回元素为0个的字典，重复Key也不要紧
            </summary>
        </member>
        <member name="M:SGLibrary.Extend.SGLinq.Count``1(System.Collections.Generic.IEnumerable{``0},SGLibrary.Extend.Func{``0,System.Boolean})">
            <summary>
            记数, source不可为null
            </summary>
        </member>
        <member name="M:SGLibrary.Extend.SGLinq.Count``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            记数, source不可为null
            </summary>
        </member>
        <member name="T:SGLibrary.Trick.Buffer`1">
            <summary>
            一个缓存器
            </summary>
        </member>
        <member name="M:SGLibrary.Trick.Buffer`1.#ctor(SGLibrary.Trick.FunGetter{`0},System.Int32)">
            <summary>
            life: 单位秒
            </summary>
        </member>
        <member name="T:SGLibrary.Framework.WSModelConvert.IWSModelConverter">
            <summary>
            实现Web引用对象与本地对象间转换
            只转换同名的Public/Instance属性，同类型的直接转换，对象则递归(注意不可以出现循环的类型：属性是某父级类型)
            Web引用会生成新的类，这样Web引用面向的模型与直接访问面向的模型不一致，
            使客户端不能灵活转换本地引擎/远程引擎，通过这个转换可以轻易实现模型的一致
            </summary>
        </member>
        <member name="T:SGLibrary.Framework.Log.LogLevel">
            <summary>
            All > Info > Warn > Error > Fatal > Off
            </summary>
        </member>
        <member name="T:SGLibrary.Framework.Criterion.WhereCtlString">
            <summary>
            字符串查询条件
            </summary>
        </member>
        <member name="F:SGLibrary.Framework.Criterion.WhereCtlString.components">
            <summary> 
            Required designer variable.
            </summary>
        </member>
        <member name="M:SGLibrary.Framework.Criterion.WhereCtlString.Dispose(System.Boolean)">
            <summary> 
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:SGLibrary.Framework.Criterion.WhereCtlString.InitializeComponent">
            <summary> 
            Required method for Designer support - do not modify 
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="T:SGLibrary.Framework.Criterion.WhereCtlIntCb">
            <summary>
            下的数值拉查询条件
            </summary>
        </member>
        <member name="F:SGLibrary.Framework.Criterion.WhereCtlIntCb.components">
            <summary> 
            Required designer variable.
            </summary>
        </member>
        <member name="M:SGLibrary.Framework.Criterion.WhereCtlIntCb.Dispose(System.Boolean)">
            <summary> 
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:SGLibrary.Framework.Criterion.WhereCtlIntCb.InitializeComponent">
            <summary> 
            Required method for Designer support - do not modify 
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="T:SGLibrary.Framework.Criterion.WhereCtlDate">
            <summary>
            日起查询条件
            </summary>
        </member>
        <member name="F:SGLibrary.Framework.Criterion.WhereCtlDate.components">
            <summary> 
            Required designer variable.
            </summary>
        </member>
        <member name="M:SGLibrary.Framework.Criterion.WhereCtlDate.Dispose(System.Boolean)">
            <summary> 
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:SGLibrary.Framework.Criterion.WhereCtlDate.InitializeComponent">
            <summary> 
            Required method for Designer support - do not modify 
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="T:SGLibrary.Framework.Criterion.WhereNodeString">
            <summary>
            字符串的查询条件
            </summary>
        </member>
        <member name="M:SGLibrary.Framework.Criterion.WhereNodeString.#ctor(System.String,System.String)">
            <summary>
            等于
            </summary>
        </member>
        <member name="P:SGLibrary.Framework.Criterion.WhereNodeString.Compare">
            <summary>
            比较符
            </summary>
        </member>
        <member name="T:SGLibrary.Extend.ExConvertHex">
            <summary>
                把值类型以及字符串转换为16进制字符串以及反向转换
                本类的16进制串顺序与机器无关，总是如: 01FF(01 * 256 + FF)
            </summary>
        </member>
        <member name="T:SGLibrary.Extend.ExBuildStrListWithSplt">
            <summary>
            把IList&lt;String&gt;组合成用Spliter分隔的串以及反向的拆解
            </summary>
        </member>
        <member name="T:SGLibrary.Extend.ExBuildListWithSpltBase`1">
            <summary>
                把IList组合成用Spliter分隔的串以及反向的拆解
                这个想法有问题
            </summary>
        </member>
        <member name="M:SGLibrary.Extend.ExBuildListWithSpltBase`1.ListToStr(System.Collections.Generic.IList{`0})">
            <summary>
                组合成字符串
            </summary>
        </member>
        <member name="M:SGLibrary.Extend.ExBuildListWithSpltBase`1.StrToList(System.String)">
            <summary>
                反向的拆解
            </summary>
        </member>
        <member name="M:SGLibrary.Extend.ControlEx.ExComboBox.FindKeyTextItem``1(System.Windows.Forms.ComboBox.ObjectCollection,``0)">
            <summary>
            对Item是ValueText&lt;T&gt;类型的找到对应的Value
            </summary>
        </member>
        <member name="M:SGLibrary.Framework.WSModelConvert.ClassMapProvider.GetClassMap(System.Type,System.Type)">
            <summary>
            获取转换的映射描述
            </summary>
        </member>
        <member name="T:SGLibrary.Framework.ORM.OrmDirectnessMap`1">
            <summary>
            只用来读, 实体类不需要加任何标签，使用：
            var orm = new OrmPlanar&lt;EnBizLog&gt;(ThisModule, new OrmDirectnessMap&lt;EnBizLog&gt;());
            return orm.Query(where);
            </summary>
        </member>
        <member name="T:SGLibrary.Framework.ORM.ORConvertImpl`1">
            <summary>
            这个类完成Table到Object间的转换，目的是处理旧的基于DataSet的应用
            </summary>
        </member>
        <member name="M:SGLibrary.Framework.ORM.ORConvertImpl`1.#ctor(System.String)">
            <summary>
            指定了参数fieldDefaultPrefix则覆盖OrmEntityAttribute定义的OrmEntityAttribute
            如实体类未使用OrmEntityAttribute，或OrmProperty未指定字段明，则字段名=fieldDefaultPrefix + 属性名
            会自动处理属性的大小写
            </summary>
        </member>
        <member name="M:SGLibrary.Framework.ORM.ORConvertImpl`1.#ctor(System.Collections.Generic.IDictionary{System.String,System.String})">
            <summary>
            字段名 -> 属性名
            </summary>
        </member>
        <member name="P:SGLibrary.Framework.ORM.ORConvertImpl`1.FieldDefaultPrefix">
            <summary>
            默认字段前缀，总是大写
            </summary>
        </member>
        <member name="M:SGLibrary.Framework.Log.Log4netConfig.SetLogDirectory(System.String,System.String)">
            <summary>
            通过替换字符串实现，格式不规范将不能正确工作
            </summary>
        </member>
        <member name="M:SGLibrary.Framework.Log.Log4netConfig.GetLogDirectory(System.String)">
            <summary>
            通过查找字符串实现，格式不规范将不能正确工作
            </summary>
        </member>
        <member name="T:SGLibrary.Framework.Log.IUser4Log">
            <summary>
            业务日志之用户
            </summary>
        </member>
        <member name="M:SGLibrary.Framework.Criterion.IWhereRem.ListWhereRemItems">
            <summary>
            返回null: 不支持预装载
            </summary>
        </member>
        <member name="T:SGLibrary.Framework.Criterion.WhereNodeStringLen">
            <summary>
            字符串长度的查询条件
            </summary>
        </member>
        <member name="M:SGLibrary.Framework.Criterion.WhereNodeStringLen.#ctor(System.String,System.Int32)">
            <summary>
            字符串长度的查询条件，默认等于
            </summary>
        </member>
        <member name="P:SGLibrary.Framework.Criterion.WhereNodeStringLen.Compare">
            <summary>
            比较符
            </summary>
        </member>
        <member name="P:SGLibrary.Framework.Criterion.WhereNodeStringLen.CompareValue">
            <summary>
            长度
            </summary>
        </member>
        <member name="P:SGLibrary.Framework.Criterion.WhereNodeStringLen.CompareValueLow">
            <summary>
            StartsWith、Contains使用
            </summary>
        </member>
        <member name="P:SGLibrary.Framework.Criterion.WhereNodeStringLen.CompareValueTop">
            <summary>
            EndsWith、Contains使用
            </summary>
        </member>
        <member name="T:SGLibrary.Framework.Criterion.WhereNodeDate">
            <summary>
            日期查询条件，支持相对日期
            数据库中此Field是否包含时间不影响
            </summary>
        </member>
        <member name="M:SGLibrary.Framework.Criterion.WhereNodeDate.#ctor(System.String,System.DateTime,System.DateTime)">
            <summary>
            包含端点的区间
            </summary>
        </member>
        <member name="M:SGLibrary.Framework.Criterion.WhereNodeDate.#ctor(System.String,System.DateTime)">
            <summary>
            等于
            </summary>
        </member>
        <member name="M:SGLibrary.Framework.Criterion.WhereNodeDate.BuildDateWhere(SGLibrary.Framework.Criterion.WhereNodeDate,SGLibrary.Extend.DB.IDbDialect,SGLibrary.Framework.Criterion.DlgBindToFieldName,System.Collections.Generic.IList{SGLibrary.Extend.KeyValue{System.String,System.Object}})">
            <summary>
            把相对时间转为绝对时间
            </summary>
        </member>
        <member name="M:SGLibrary.Framework.Criterion.WhereNodeDate.BuildDateWhere_Absolute(SGLibrary.Framework.Criterion.WhereNodeDate,SGLibrary.Extend.DB.IDbDialect,SGLibrary.Framework.Criterion.DlgBindToFieldName,System.Collections.Generic.IList{SGLibrary.Extend.KeyValue{System.String,System.Object}})">
            <summary>
            绝对时间
            </summary>
        </member>
        <member name="P:SGLibrary.Framework.Criterion.WhereNodeDate.Compare">
            <summary>
            比较符
            </summary>
        </member>
        <member name="P:SGLibrary.Framework.Criterion.WhereNodeDate.CompareByNow">
            <summary>
            相对时间比较
            </summary>
        </member>
        <member name="P:SGLibrary.Framework.Criterion.WhereNodeDate.CompareValue">
            <summary>
            Equal、UnEqual使用此属性
            </summary>
        </member>
        <member name="P:SGLibrary.Framework.Criterion.WhereNodeDate.CompareValueLow">
            <summary>
            StartsWith、Contains使用
            </summary>
        </member>
        <member name="P:SGLibrary.Framework.Criterion.WhereNodeDate.CompareValueTop">
            <summary>
            EndsWith、Contains使用
            </summary>
        </member>
        <member name="P:SGLibrary.Framework.Criterion.WhereNodeDate.IncludeLow">
            <summary>
            包含低端
            </summary>
        </member>
        <member name="P:SGLibrary.Framework.Criterion.WhereNodeDate.IncludeTop">
            <summary>
            包含高端
            </summary>
        </member>
        <member name="T:SGLibrary.Extend.TypeExtend">
            <summary>
            动态创建类型
            </summary>
        </member>
        <member name="M:SGLibrary.Extend.TypeExtend.Build``1(System.String,System.Collections.Generic.IList{SGLibrary.Extend.KeyValue{System.String,System.Type}},System.Type[])">
            <summary>
            动态创建一个派生于T且扩展了指定属性的类型
            </summary>
        </member>
        <member name="M:SGLibrary.Extend.TypeExtend.BuildBak``1">
            <summary>
            演示的方法,不要用
            动态创建一个派生于T且扩展了一个Checked(Boolean)属性的类型
            </summary>
        </member>
        <member name="M:SGLibrary.Extend.ControlEx.IMemoryForm.GetRemValue">
            <summary>
            返回null则不会被记忆
            </summary>
        </member>
        <member name="M:SGLibrary.Extend.ControlEx.IMemoryForm.SetRemValue(System.String)">
            <summary>
            Value一定不为空
            </summary>
        </member>
        <member name="T:SGLibrary.Extend.ControlEx.FormMemoryImpl">
            <summary>
            如果使用了Splitter请写入Shown事件
            </summary>
        </member>
        <member name="M:SGLibrary.Framework.TreeCodeHelper`1.TestNewCode(System.String)">
            <summary>
            测试长度、构成字符、父节点是否存在、newCode是否被使用
            </summary>
        </member>
        <member name="M:SGLibrary.Framework.TreeCodeHelper`1.TestReplaceCode(System.String,System.String)">
            <summary>
            测试newCode是否合法、newCode是否被使用、oldCode是否存在、是否非法嵌套、树的最大深度
            </summary>
        </member>
        <member name="T:SGLibrary.Framework.ConstTreeNode">
            <summary>
            常量树的节点
            </summary>
        </member>
        <member name="M:SGLibrary.Framework.ConstTreeNode.Clone">
            <summary>
            深Clone
            </summary>
        </member>
        <member name="P:SGLibrary.Framework.ConstTreeNode.Id">
            <summary>
            Id = 0 是虚的
            </summary>
        </member>
        <member name="P:SGLibrary.Framework.ConstTreeNode.Name">
            <summary>
            type.Name/fieldInfo.Name
            </summary>
        </member>
        <member name="T:SGLibrary.Framework.ORM.OrmEntityCodeBuilder">
            <summary>
            这个类用来协助创建实体类
            </summary>
        </member>
        <member name="T:SGLibrary.Framework.Log.SimpleLogImpl_Text">
            <summary>
            这个日志类不适用于Web,因为定时器的原因
            Web请用ThreadSafeLogText
            </summary>
        </member>
        <member name="F:SGLibrary.Framework.GridBind.WinForm.ColumnCustomFm.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:SGLibrary.Framework.GridBind.WinForm.ColumnCustomFm.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:SGLibrary.Framework.GridBind.WinForm.ColumnCustomFm.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="P:SGLibrary.Framework.GridBind.GridBindGridCfg.Frozen">
            <summary>
            冻结的列数
            </summary>
        </member>
        <member name="T:SGLibrary.Framework.Config.IListConfig">
            <summary>
            配置成组数据用,也可作为IConfig用
            </summary>
        </member>
        <member name="T:SGLibrary.Extend.KeyText`1">
            <summary>
            推荐使用KeyValuePair
            </summary>
        </member>
        <member name="M:SGLibrary.Extend.KeyText`1.ToString">
            <summary>
            很多地方显示用，不要修改
            </summary>
        </member>
        <member name="M:SGLibrary.Extend.ExUrl.FormatPath(System.String)">
            <summary>
            清除空格并保证以"/"结尾
            </summary>
        </member>
        <member name="M:SGLibrary.Extend.ExUrl.UpdateWebServiceUrl(System.String,System.String)">
            <summary>
            将如http://10.10.3.12/webservice 与 http://localhost/webservice/debug.asmx
            合成为http://10.10.3.12/webservice/debug.asmx
            </summary>
        </member>
        <member name="M:SGLibrary.Extend.ExUrl.GetServicePath(System.String)">
            <summary>
            获得Url中路径部分如 http://localhost/webservice/debug.asmx
            得到http://localhost/webservice/
            </summary>
        </member>
        <member name="T:SGLibrary.Extend.ExTrimnessIntStr">
            <summary>
            整型数格式化到字符串
            </summary>
        </member>
        <member name="M:SGLibrary.Extend.DB.IDbHelper.Add_List``1(System.Collections.Generic.IList{``0})">
            <summary>
            自动生成的Id会回写入values
            可能部分成功，会跳过null
            </summary>
        </member>
        <member name="M:SGLibrary.Extend.DB.IDbHelper.Delete_List``1(System.Collections.Generic.IList{``0})">
            <summary>
            会跳过null
            </summary>
        </member>
        <member name="M:SGLibrary.Extend.DB.IDbHelper.Delete_Where``1(SGLibrary.Framework.Criterion.WhereList)">
            <summary>
            指定null不删除任何
            当前实现当有外连接时多表联合删除有潜在问题的！！！
            </summary>
        </member>
        <member name="M:SGLibrary.Extend.DB.IDbHelper.Update``1(``0,System.String[])">
            <summary>
            只更新指定的属性，未指定则更新所有
            </summary>
        </member>
        <member name="M:SGLibrary.Extend.DB.IDbHelper.Update_List``1(System.Collections.Generic.IList{``0},System.String[])">
            <summary>
            可能部分成功，会跳过null
            </summary>
        </member>
        <member name="M:SGLibrary.Extend.DB.IDbHelper.Get_Where``1(SGLibrary.Framework.Criterion.WhereList,System.Collections.Generic.IList{SGLibrary.Framework.Criterion.OrderNode})">
            <summary>
            无符合条件的返回null，否则返回第一个
            </summary>
        </member>
        <member name="M:SGLibrary.Extend.DB.IDbHelper.Query_Paging``1(SGLibrary.Framework.Criterion.WhereList,System.Collections.Generic.IList{SGLibrary.Framework.Criterion.OrderNode},System.Int32,System.Int32)">
            <summary>
            分页查询，注意pageIndex 0起点
            </summary>
        </member>
        <member name="F:SGLibrary.Extend.ControlEx.ShowProgressFm.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:SGLibrary.Extend.ControlEx.ShowProgressFm.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:SGLibrary.Extend.ControlEx.ShowProgressFm.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="M:SGLibrary.Extend.ExIList.ToList``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            有可能是as 有可能是new List
            </summary>
        </member>
        <member name="T:SGLibrary.Extend.CompareImplSimpleness`1">
            <summary>
            简单的排序，只对对象的某属性排序
            </summary>
        </member>
        <member name="T:SGLibrary.Extend.CompareImplComplex`1">
            <summary>
            复杂排序，支持：类.属性.属性
            </summary>
        </member>
        <member name="P:SGLibrary.Framework.FunNodeAttribute.Text">
            <summary>
            文本
            </summary>
        </member>
        <member name="P:SGLibrary.Framework.FunNodeAttribute.EnabledBizScene">
            <summary>
            自动继承父场景，自根都没指定则任何场景都有效
            </summary>
        </member>
        <member name="P:SGLibrary.Framework.FunNodeAttribute.Authorities">
            <summary>
            未指定则任何用户有效
            </summary>
        </member>
        <member name="T:SGLibrary.Framework.GridBind.WinForm.GridCheckBind`1">
            <summary>
            一个用来选择对象的列表管理器
            </summary>
        </member>
        <member name="M:SGLibrary.Framework.GridBind.WinForm.GridCheckBind`1.BuildCheckType">
            <summary>
            动态创建一个派生于T且扩展了一个Checked(Boolean)属性的类型
            </summary>
        </member>
        <member name="P:SGLibrary.Framework.GridBind.WinForm.GridCheckBind`1.Current">
            <summary>
            获取列表中的当前项
            </summary>
        </member>
        <member name="T:SGLibrary.Framework.GridBind.GridBindColumnMngImpl_Appoint">
            <summary>
            用于程序指定列而不是通过反射获得属性的Attribute
            </summary>
        </member>
        <member name="M:SGLibrary.Framework.GridBind.IGridBindColumnMng.GetColumnAndPropertyMaps(System.Int32)">
            <summary>
            获得指定业务场景下属性与列的映射关系
            </summary>
        </member>
        <member name="T:SGLibrary.Framework.Criterion.WhereCtlInt">
            <summary>
            数值查询条件
            </summary>
        </member>
        <member name="F:SGLibrary.Framework.Criterion.WhereCtlInt.components">
            <summary> 
            Required designer variable.
            </summary>
        </member>
        <member name="M:SGLibrary.Framework.Criterion.WhereCtlInt.Dispose(System.Boolean)">
            <summary> 
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:SGLibrary.Framework.Criterion.WhereCtlInt.InitializeComponent">
            <summary> 
            Required method for Designer support - do not modify 
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="T:SGLibrary.Framework.Criterion.WhereNodeCode_Tree">
            <summary>
            字符串树结构Code的查询条件
            </summary>
        </member>
        <member name="M:SGLibrary.Framework.Criterion.WhereNodeCode_Tree.#ctor(System.String,System.String)">
            <summary>
            包含于
            </summary>
        </member>
        <member name="P:SGLibrary.Framework.Criterion.WhereNodeCode_Tree.Compare">
            <summary>
            比较符
            </summary>
        </member>
        <member name="T:SGLibrary.Framework.Criterion.WhereNodeCode_String">
            <summary>
            字符串Code的查询条件
            </summary>
        </member>
        <member name="M:SGLibrary.Framework.Criterion.WhereNodeCode_String.#ctor(System.String,System.String)">
            <summary>
            等于
            </summary>
        </member>
        <member name="P:SGLibrary.Framework.Criterion.WhereNodeCode_String.Compare">
            <summary>
            比较符
            </summary>
        </member>
        <member name="M:SGLibrary.Extend.IHashSet20`1.Remove(`0)">
            <summary>
            如果t不存在，return false
            </summary>
        </member>
        <member name="M:SGLibrary.Extend.IHashSet20`1.Overlaps(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            存在交集，other不可为空
            </summary>
        </member>
        <member name="M:SGLibrary.Extend.IHashSet20`1.IntersectWith(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            得到交集，other不可为空 
            </summary>
        </member>
        <member name="M:SGLibrary.Extend.IHashSet20`1.UnionWith(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            得到并集，other不可为空 
            </summary>
        </member>
        <member name="T:SGLibrary.Extend.ExDateTime">
            <summary>
                日期时间扩展
            </summary>
        </member>
        <member name="F:SGLibrary.Extend.ExDateTime.FormatStr_Date">
            <summary>
            2012.01.09
            </summary>
        </member>
        <member name="F:SGLibrary.Extend.ExDateTime.FormatStr_Time">
            <summary>
            12:23:45，24小时制
            </summary>
        </member>
        <member name="F:SGLibrary.Extend.ExDateTime.FormatStr_DateTime">
            <summary>
            2012.01.09 12:23:45，24小时制
            </summary>
        </member>
        <member name="M:SGLibrary.Extend.ExDateTime.DateTimeToUniformStr(System.DateTime,System.Int32,System.String)">
            <summary>
                获得长度固定的日期时间字符串,如"070228_031011"
            </summary>
        </member>
        <member name="M:SGLibrary.Extend.ExDateTime.SafeToOADateTime(System.DateTime)">
            <summary>
            如果转换失败,使用OleDbMinDateTime
            </summary>
        </member>
        <member name="M:SGLibrary.Extend.ExDateTime.GetStartMomentOfDay(System.DateTime)">
            <summary>
            获取指定日期的开始时刻：yyyymmdd 0:0:0.000
            </summary>
        </member>
        <member name="M:SGLibrary.Extend.ExDateTime.GetEndMomentOfDay(System.DateTime)">
            <summary>
            获取指定日期的结束时刻：yyyymmdd 23:59:59.999
            </summary>
        </member>
        <member name="F:SGLibrary.Extend.ExDateTime.DateAt.Invalid">
            <summary>
            无效值
            </summary>
        </member>
        <member name="F:SGLibrary.Extend.ExDateTime.DateAt.Century">
            <summary>
            世纪
            </summary>
        </member>
        <member name="F:SGLibrary.Extend.ExDateTime.DateAt.Year">
            <summary>
            年
            </summary>
        </member>
        <member name="F:SGLibrary.Extend.ExDateTime.DateAt.Month">
            <summary>
            月
            </summary>
        </member>
        <member name="F:SGLibrary.Extend.ExDateTime.DateAt.Day">
            <summary>
            日
            </summary>
        </member>
        <member name="F:SGLibrary.Extend.ExDateTime.DateAt.Hour">
            <summary>
            时
            </summary>
        </member>
        <member name="F:SGLibrary.Extend.ExDateTime.DateAt.Minute">
            <summary>
            分
            </summary>
        </member>
        <member name="F:SGLibrary.Extend.ExDateTime.DateAt.Second">
            <summary>
            秒
            </summary>
        </member>
        <member name="F:SGLibrary.Extend.ExDateTime.DateAt.Millisecond">
            <summary>
            毫秒
            </summary>
        </member>
        <member name="F:SGLibrary.Extend.ExDateTime.DateAt.WeekOfYear">
            <summary>
            一年的第多少周
            </summary>
        </member>
        <member name="F:SGLibrary.Extend.ExDateTime.DateAt.DayOfYear">
            <summary>
            一年的第多少天
            </summary>
        </member>
        <member name="F:SGLibrary.Extend.ExDateTime.DateAt.DayOfWeek">
            <summary>
            一周的第几天
            </summary>
        </member>
        <member name="T:SGLibrary.Extend.ControlEx.PhoneDialer">
            <summary>
            电话号码输入
            </summary>
        </member>
        <member name="F:SGLibrary.Extend.ControlEx.PhoneDialer.components">
            <summary> 
            Required designer variable.
            </summary>
        </member>
        <member name="M:SGLibrary.Extend.ControlEx.PhoneDialer.Dispose(System.Boolean)">
            <summary> 
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:SGLibrary.Extend.ControlEx.PhoneDialer.InitializeComponent">
            <summary> 
            Required method for Designer support - do not modify 
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="F:SGLibrary.Extend.ControlEx.HandyTextBox.components">
            <summary> 
            Required designer variable.
            </summary>
        </member>
        <member name="M:SGLibrary.Extend.ControlEx.HandyTextBox.Dispose(System.Boolean)">
            <summary> 
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:SGLibrary.Extend.ControlEx.HandyTextBox.InitializeComponent">
            <summary> 
            Required method for Designer support - do not modify 
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="T:SGLibrary.Extend.KeyDict`2">
            <summary>
            处理ID/对象的缓冲
            </summary>
        </member>
        <member name="T:SGLibrary.Framework.StringEnum">
            <summary>
            例子，通常用来处理程序中与业务逻辑相关的、以文本值而非Code保存的类型
            </summary>
        </member>
        <member name="M:SGLibrary.Framework.StringEnum.GetIndex(System.String)">
            <summary>
            0起点，不存在返回 -1
            </summary>
        </member>
        <member name="M:SGLibrary.Framework.StringEnum.GetValue(System.Int32)">
            <summary>
            0起点，不存在返回 null
            </summary>
        </member>
        <member name="T:SGLibrary.Framework.ConstTree`1">
            <summary>
            构建常量树,用来处理权限\业务日志\业务消息
            </summary>
        </member>
        <member name="M:SGLibrary.Framework.ConstTree`1.GetTree">
            <summary>
            获取树
            </summary>
        </member>
        <member name="M:SGLibrary.Framework.ConstTree`1.BuileConstTree(System.Type,System.Collections.Generic.IDictionary{System.Type,SGLibrary.Framework.ConstTreeNode},System.Collections.Generic.IDictionary{System.Int32,SGLibrary.Framework.ConstTreeNode})">
            <summary>
            构建树，Id与Description的对应关系会加入descriptDict，将被递归调用，所以传type
            </summary>
        </member>
        <member name="M:SGLibrary.Framework.ConstTree`1.SetSelect(SGLibrary.Framework.ConstTreeNode,System.Collections.Generic.IList{System.Int32})">
            <summary>
            设置树的选择，不会设置Id为0的
            </summary>
        </member>
        <member name="M:SGLibrary.Framework.ConstTree`1.GetSelect(SGLibrary.Framework.ConstTreeNode)">
            <summary>
            获取树的选择，不会取Id为0的
            </summary>
        </member>
        <member name="M:SGLibrary.Framework.ConstTree`1.GetTreeNode(System.Int32)">
            <summary>
            根据常量Id，获取节点
            </summary>
        </member>
        <member name="M:SGLibrary.Framework.ConstTree`1.GetTreeNode(System.Type)">
            <summary>
            根据类型，获取节点
            </summary>
        </member>
        <member name="T:SGLibrary.Framework.Criterion.WhereCtlCodeCb_Int">
            <summary>
            数值代码查询条件，数值代码不可为0
            </summary>
        </member>
        <member name="F:SGLibrary.Framework.Criterion.WhereCtlCodeCb_Int.components">
            <summary> 
            Required designer variable.
            </summary>
        </member>
        <member name="M:SGLibrary.Framework.Criterion.WhereCtlCodeCb_Int.Dispose(System.Boolean)">
            <summary> 
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:SGLibrary.Framework.Criterion.WhereCtlCodeCb_Int.InitializeComponent">
            <summary> 
            Required method for Designer support - do not modify 
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="T:SGLibrary.Framework.Criterion.WhereControlFilter">
            <summary>
            属性过滤用查询条件：输入文本后回车即执行查询，不用于WhereControlPanel
            </summary>
        </member>
        <member name="M:SGLibrary.Framework.Criterion.WhereControlFilter.#ctor">
            <summary>
            构造函数
            </summary>
        </member>
        <member name="F:SGLibrary.Framework.Criterion.WhereControlFilter.components">
            <summary> 
            必需的设计器变量。
            </summary>
        </member>
        <member name="M:SGLibrary.Framework.Criterion.WhereControlFilter.Dispose(System.Boolean)">
            <summary> 
            清理所有正在使用的资源。
            </summary>
            <param name="disposing">如果应释放托管资源，为 true；否则为 false。</param>
        </member>
        <member name="M:SGLibrary.Framework.Criterion.WhereControlFilter.InitializeComponent">
            <summary> 
            设计器支持所需的方法 - 不要
            使用代码编辑器修改此方法的内容。
            </summary>
        </member>
        <member name="P:SGLibrary.Framework.Criterion.WhereControlFilter.Text">
            <summary>
            显示的文本
            </summary>
        </member>
        <member name="P:SGLibrary.Framework.Criterion.WhereControlFilter.TextSectionLength">
            <summary>
            文本预留的空间
            </summary>
        </member>
        <member name="P:SGLibrary.Framework.Criterion.WhereControlFilter.TextAlign">
            <summary>
            文本对齐方式
            </summary>
        </member>
        <member name="P:SGLibrary.Framework.Criterion.WhereControlFilter.MaxEditWidth">
            <summary>
            输入框最大宽度
            </summary>
        </member>
        <member name="P:SGLibrary.Framework.Criterion.WhereControlFilter.BindProperty">
            <summary>
            绑定的属性, 为用','分隔的字符串
            </summary>
        </member>
        <member name="E:SGLibrary.Framework.Criterion.WhereControlFilter.Query">
            <summary>
            查询事件
            </summary>
        </member>
        <member name="P:SGLibrary.Framework.Criterion.WhereControlFilter.QuerySleep">
            <summary>
            查询时让程序反应钝一点，使用户形成查询需要代价的潜意识。单位毫秒
            </summary>
        </member>
        <member name="P:SGLibrary.Framework.Criterion.WhereControlFilter.MaxResults">
            <summary>
            最大返回数据行
            </summary>
        </member>
        <member name="P:SGLibrary.Framework.Criterion.WhereControlFilter.MaxRemItems">
            <summary>
            最大记忆行
            </summary>
        </member>
        <member name="E:SGLibrary.Framework.Criterion.WhereControlFilter.QueryExceptionHandler">
            <summary>
            执行查询发生错误
            </summary>
        </member>
        <member name="T:SGLibrary.Extend.PeriodOfTime">
            <summary>
            时间区间
            </summary>
        </member>
        <member name="T:SGLibrary.Extend.ExStopwatch">
            <summary>
               程序记时
            </summary>
        </member>
        <member name="M:SGLibrary.Extend.ExStopwatch.Reset">
            <summary>
               停止时间间隔测量，并将运行时间重置为零。
            </summary>
        </member>
        <member name="M:SGLibrary.Extend.ExStopwatch.Start">
            <summary>
               开始或继续测量某个时间间隔的运行时间。
            </summary>
        </member>
        <member name="M:SGLibrary.Extend.ExStopwatch.Stop">
            <summary>
               停止测量某个时间间隔的运行时间。
            </summary>
        </member>
        <member name="M:SGLibrary.Extend.ExStopwatch.Search">
            <summary>
               显示实际耗时，显示时将挂起。
            </summary>
        </member>
        <member name="M:SGLibrary.Extend.ExStopwatch.Search(System.String)">
            <summary>
               显示实际耗时，显示时将挂起。
            </summary>
        </member>
        <member name="T:SGLibrary.Extend.DB.StrProperty2DbCheckImpl">
            <summary>
            实体写到数据库前对字符串做属性的Check
            </summary>
        </member>
        <member name="M:SGLibrary.Extend.DB.StrProperty2DbCheckImpl.GetStrPropertyCheckInfoMap(System.Type,System.String[])">
            <summary>
            获得指定属性列表中字符串属性及长度限制的列表，未指定属性则所有
            </summary>
        </member>
        <member name="M:SGLibrary.Extend.DB.ExGridView.ToStringArray(System.Windows.Forms.DataGridView)">
            <summary>
            调试用的方法, 隐藏列也输出
            </summary>
        </member>
        <member name="M:SGLibrary.Extend.DB.ExGridView.positionToId(System.Windows.Forms.DataGridView,System.Int64,System.Int32)">
            <summary>
                通过一个Id定位到表格的具体行
            </summary>
        </member>
        <member name="M:SGLibrary.Extend.DB.ExGridView.GridFilter(System.Windows.Forms.DataGridView,System.String)">
            <summary>
                过滤表格行，所有行都参与过滤，不显示的列不参与过滤，Filter为空显示所有行
            过滤条件是简单包含，不存在统配符
            </summary>
        </member>
        <member name="F:SGLibrary.Extend.ControlEx.ShowListFm.components">
            <summary>
            必需的设计器变量。
            </summary>
        </member>
        <member name="M:SGLibrary.Extend.ControlEx.ShowListFm.Dispose(System.Boolean)">
            <summary>
            清理所有正在使用的资源。
            </summary>
            <param name="disposing">如果应释放托管资源，为 true；否则为 false。</param>
        </member>
        <member name="M:SGLibrary.Extend.ControlEx.ShowListFm.InitializeComponent">
            <summary>
            设计器支持所需的方法 - 不要
            使用代码编辑器修改此方法的内容。
            </summary>
        </member>
        <member name="T:SGLibrary.Framework.WSModelConvert.PropertyMap">
            <summary>
            属性映射
            </summary>
        </member>
        <member name="F:SGLibrary.Framework.WSModelConvert.PropertyMap.PropertyS">
            <summary>
            源属性
            </summary>
        </member>
        <member name="F:SGLibrary.Framework.WSModelConvert.PropertyMap.PropertyT">
            <summary>
            目标属性
            </summary>
        </member>
        <member name="F:SGLibrary.Framework.WSModelConvert.PropertyMap_Class.PropertyClassMap">
            <summary>
            属性是类，属性的类的映射
            </summary>
        </member>
        <member name="F:SGLibrary.Framework.WSModelConvert.PropertyMap_Collections.ElementCanDirectSetValue">
            <summary>
            成员可以直接赋值
            </summary>
        </member>
        <member name="F:SGLibrary.Framework.WSModelConvert.PropertyMap_Collections.ElementClassMap">
            <summary>
            成员是类，成员的类的映射
            </summary>
        </member>
        <member name="T:SGLibrary.Framework.WSModelConvert.ClassMap">
            <summary>
            类映射
            </summary>
        </member>
        <member name="F:SGLibrary.Framework.WSModelConvert.ClassMap.PropertyMaps">
            <summary>
            属性映射表
            </summary>
        </member>
        <member name="P:SGLibrary.Framework.WSModelConvert.ClassMap.TypeS">
            <summary>
            源类
            </summary>
        </member>
        <member name="P:SGLibrary.Framework.WSModelConvert.ClassMap.TypeT">
            <summary>
            目标类
            </summary>
        </member>
        <member name="T:SGLibrary.Framework.ORM.ValueEntity`1">
            <summary>
            返回单字段列表用，FieldName：FValue
            </summary>
        </member>
        <member name="M:SGLibrary.Framework.ORM.ORMDbHelperImpl.NewOrmPlanar``1">
            <summary>
            通过改写获得制定类型的IOrmPlanar, 通常是获得派生于OrmPlanar&lt;T&gt;的对象
            </summary>
        </member>
        <member name="M:SGLibrary.Framework.ORM.ORMDbHelperImpl.Get_Where``1(SGLibrary.Framework.Criterion.WhereList,System.Collections.Generic.IList{SGLibrary.Framework.Criterion.OrderNode})">
            <summary>
            无符合条件的返回null，否则返回第一个
            </summary>
        </member>
        <member name="T:SGLibrary.Framework.ORM.IMappingEventInterceptor">
            <summary>
            用于处理复杂属性的映射
            </summary>
        </member>
        <member name="T:SGLibrary.Framework.GridBind.ORM2GridBindBridge">
            <summary>
            ORM2GridBind的桥接
            </summary>
        </member>
        <member name="T:SGLibrary.Framework.GridBind.GridBindBizSceneAttribute">
            <summary>
            业务场景
            </summary>
        </member>
        <member name="P:SGLibrary.Framework.GridBind.GridBindBizSceneAttribute.BizSceneId">
            <summary>
            0为缺省, 不要用
            </summary>
        </member>
        <member name="T:SGLibrary.Framework.Criterion.WhereCtlStringCb">
            <summary>
            下拉的字符串查询条件
            </summary>
        </member>
        <member name="F:SGLibrary.Framework.Criterion.WhereCtlStringCb.components">
            <summary> 
            Required designer variable.
            </summary>
        </member>
        <member name="M:SGLibrary.Framework.Criterion.WhereCtlStringCb.Dispose(System.Boolean)">
            <summary> 
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:SGLibrary.Framework.Criterion.WhereCtlStringCb.InitializeComponent">
            <summary> 
            Required method for Designer support - do not modify 
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="T:SGLibrary.Framework.Criterion.WhereCtlDecimal">
            <summary>
            数值查询条件
            </summary>
        </member>
        <member name="F:SGLibrary.Framework.Criterion.WhereCtlDecimal.components">
            <summary> 
            Required designer variable.
            </summary>
        </member>
        <member name="M:SGLibrary.Framework.Criterion.WhereCtlDecimal.Dispose(System.Boolean)">
            <summary> 
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:SGLibrary.Framework.Criterion.WhereCtlDecimal.InitializeComponent">
            <summary> 
            Required method for Designer support - do not modify 
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="T:SGLibrary.Framework.Criterion.WhereNodeDecimal">
            <summary>
            浮点数的查询条件
            </summary>
        </member>
        <member name="M:SGLibrary.Framework.Criterion.WhereNodeDecimal.#ctor(System.String,System.Decimal)">
            <summary>
            等于
            </summary>
        </member>
        <member name="M:SGLibrary.Framework.Criterion.WhereNodeDecimal.#ctor(System.String,System.Decimal,System.Decimal)">
            <summary>
            包含端点的区间
            </summary>
        </member>
        <member name="P:SGLibrary.Framework.Criterion.WhereNodeDecimal.Compare">
            <summary>
            比较符
            </summary>
        </member>
        <member name="P:SGLibrary.Framework.Criterion.WhereNodeDecimal.CompareValue">
            <summary>
            Equal、UnEqual使用此属性
            </summary>
        </member>
        <member name="P:SGLibrary.Framework.Criterion.WhereNodeDecimal.CompareValueLow">
            <summary>
            StartsWith、Contains使用
            </summary>
        </member>
        <member name="P:SGLibrary.Framework.Criterion.WhereNodeDecimal.CompareValueTop">
            <summary>
            EndsWith、Contains使用
            </summary>
        </member>
        <member name="M:SGLibrary.Extend.ExWebIO.DownloadFile(System.Web.UI.Page,System.String,System.String)">
            <summary>
            汉字会有问题的
            </summary>
        </member>
        <member name="M:SGLibrary.Extend.ExNet.HpptPOST(System.String,System.Int32,System.String,System.String,System.Text.Encoding,System.Net.WebProxy,System.String@)">
            <summary>
                特别要注意，在winform程序中会自动使用IE的proxy，在IIS中则不能取得IE的proxy，
            必须手工构造一个proxy，且不能使用WebProxy.GetDefaultProxy()或HttpWebRequest.DefaultWebProxy，
            因为这两个方法在IIS中同样取不到IE的proxy
                化了俺一天半时间，呆
            </summary>
        </member>
        <member name="M:SGLibrary.Extend.ExNet.GetUserHostAddress">
            <summary>
            在Web页面得到用户的IP
            </summary>
        </member>
        <member name="T:SGLibrary.Extend.ExCode">
            <summary>
            处理生活中的各种编号
            </summary>
        </member>
        <member name="M:SGLibrary.Extend.ExCode.FormatMobileCode(System.String)">
            <summary>
            格式化为: 1**-****-****
            </summary>
        </member>
        <member name="M:SGLibrary.Extend.ExCode.FormatFixedTelephone(System.String)">
            <summary>
            格式化为: 0**-****-****/0***-****-****/0***-***-****
            </summary>
        </member>
        <member name="T:SGLibrary.Framework.ORM.OrmAttributeMng_ValueEntity`1">
            <summary>
            完成只能用来读的表到实体的映射, 不需要写任何配置, 不需要标注OrmEntityAttribute
            </summary>
        </member>
        <member name="T:SGLibrary.Framework.Criterion.WhereNodeStringMultiattribute">
            <summary>
            多字段查询条件，注意效率
            处理如name like @a or shortName like @a, Bind为用','分隔的字符串
            </summary>
        </member>
        <member name="M:SGLibrary.Framework.Criterion.WhereNodeStringMultiattribute.#ctor(System.String,System.String)">
            <summary>
            多字段查询条件，默认等于
            处理如name like @a or shortName like @a, Bind为用','分隔的字符串
            </summary>
        </member>
        <member name="P:SGLibrary.Framework.Criterion.WhereNodeStringMultiattribute.Compare">
            <summary>
            比较符
            </summary>
        </member>
        <member name="T:SGLibrary.Framework.Criterion.WhereNodeInt">
            <summary>
            整数的查询条件
            </summary>
        </member>
        <member name="M:SGLibrary.Framework.Criterion.WhereNodeInt.#ctor(System.String,System.Int64)">
            <summary>
            等于
            </summary>
        </member>
        <member name="M:SGLibrary.Framework.Criterion.WhereNodeInt.#ctor(System.String,System.Enum)">
            <summary>
            等于
            </summary>
        </member>
        <member name="M:SGLibrary.Framework.Criterion.WhereNodeInt.#ctor(System.String,System.Int64,System.Int64)">
            <summary>
            包含端点的区间
            </summary>
        </member>
        <member name="P:SGLibrary.Framework.Criterion.WhereNodeInt.Compare">
            <summary>
            比较符
            </summary>
        </member>
        <member name="P:SGLibrary.Framework.Criterion.WhereNodeInt.CompareValue">
            <summary>
            Equal、UnEqual使用此属性
            </summary>
        </member>
        <member name="P:SGLibrary.Framework.Criterion.WhereNodeInt.CompareValueLow">
            <summary>
            StartsWith、Contains使用
            </summary>
        </member>
        <member name="P:SGLibrary.Framework.Criterion.WhereNodeInt.CompareValueTop">
            <summary>
            EndsWith、Contains使用
            </summary>
        </member>
        <member name="T:SGLibrary.Framework.Criterion.WhereNodeExpression">
            <summary>
            where中直接使用的表达式（手工写Sql的Where用）
            todo 需要支持定义如将"[属性A] > [属性B]" 转换成查询条件的功能
            </summary>
        </member>
        <member name="T:SGLibrary.Framework.Criterion.WhereList">
            <summary>
            这是一个可递归的类, null不会被Add
            似乎已经实现了Xml序列化，可以穿越WebService
            </summary>
        </member>
        <member name="M:SGLibrary.Framework.Criterion.WhereList.#ctor(SGLibrary.Framework.Criterion.WhereNodeComposeKind,System.Int32)">
            <summary>
            指定组合
            </summary>
            <param name="composeKind">and/or</param>
            <param name="maxResults">&lt;=0不限制</param>
        </member>
        <member name="M:SGLibrary.Framework.Criterion.WhereList.Exist(System.String)">
            <summary>
            是否存在指定的Bind元素，不会被递归
            </summary>
        </member>
        <member name="M:SGLibrary.Framework.Criterion.WhereList.TryRemove(System.String)">
            <summary>
            不会被递归
            </summary>
        </member>
        <member name="M:SGLibrary.Framework.Criterion.WhereList.EachItems">
            <summary>
            迭代子成员
            </summary>
        </member>
        <member name="P:SGLibrary.Framework.Criterion.WhereList.ComposeKind">
            <summary>
            子元素组合类型（and/or）
            </summary>
        </member>
        <member name="P:SGLibrary.Framework.Criterion.WhereList.Item(System.String)">
            <summary>
            仅返回第一个，不会被递归
            </summary>
        </member>
        <member name="T:SGLibrary.Framework.CommCfgAndWhereConst">
            <summary>
            通用配置与查询条件常量
            </summary>
        </member>
        <member name="M:SGLibrary.Framework.CommCfgAndWhereConst.ArrangeSection(System.String)">
            <summary>
            
            </summary>
        </member>
        <member name="M:SGLibrary.Framework.CommCfgAndWhereConst.ArrangeKey(System.String)">
            <summary>
            
            </summary>
        </member>
        <member name="M:SGLibrary.Extend.ExDbg.ToStr(System.Object)">
            <summary>
            null 返回 is Null
            </summary>
        </member>
        <member name="M:SGLibrary.Extend.ExDbg.MergeInnerException(System.Exception)">
            <summary>
            InnerException合并进Message, 不懂log4net如何记录InnerException异常代用之
            </summary>
        </member>
        <member name="M:SGLibrary.Extend.ExDbg.GetCallerInfo(System.Int32)">
            <summary>
            获取调用此方法的方法名，deep: 0当前方法
            </summary>
        </member>
        <member name="M:SGLibrary.Extend.ExDbg.GetCallStack">
            <summary>
            获取调用栈
            </summary>
        </member>
        <member name="M:SGLibrary.Extend.ExDbg.GetExecuteInfo">
            <summary>
            获取当前执行的方法名
            </summary>
        </member>
        <member name="M:SGLibrary.Extend.ExDbg.Assert(System.Boolean,System.String)">
            <summary>
               程序调试时希望断言失败后执行适当的操作,而不是只能退出程序
               此方法给程序以机会,代价是降低了速度
            </summary>
        </member>
        <member name="M:SGLibrary.Extend.ExDbg.GetProcessesInfo">
            <summary> 
            获取进程信息, 调试状态执行会出错 
            </summary> 
        </member>
        <member name="P:SGLibrary.Extend.ExDbg.IsAttached">
             <summary>
                程序是否在调试器中跑
             </summary>
            
        </member>
        <member name="F:SGLibrary.Extend.ControlEx.ExButton.PictureButtonA.components">
            <summary> 
            Required designer variable.
            </summary>
        </member>
        <member name="M:SGLibrary.Extend.ControlEx.ExButton.PictureButtonA.Dispose(System.Boolean)">
            <summary> 
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:SGLibrary.Extend.ControlEx.ExButton.PictureButtonA.InitializeComponent">
            <summary> 
            Required method for Designer support - do not modify 
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="M:SGLibrary.Extend.ArrayToGIList`1.CopyTo(`0[],System.Int32)">
            <summary>
            复制到兼容的一维数组中，从目标数组的指定索引位置开始放置。
            </summary>
        </member>
        <member name="M:SGLibrary.Framework.TreeCodeBuilder`1.BuildTree(System.Collections.Generic.IEnumerable{`0},System.Int32)">
            <summary>
            构建一个树
            </summary>
        </member>
        <member name="M:SGLibrary.Framework.TreeCodeBuilder`1.Find(System.Collections.Generic.IEnumerable{`0},System.String)">
            <summary>
            找到此code对应的对象
            </summary>
        </member>
        <member name="M:SGLibrary.Framework.TreeCodeBuilder`1.FindParent(System.Collections.Generic.IEnumerable{`0},System.String,System.Int32,System.Int32)">
            <summary>
            找到此code对应层的父
            </summary>
        </member>
        <member name="M:SGLibrary.Framework.TreeCodeBuilder`1.EachNode(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            迭代此树的所有节点，深度优先
            </summary>
        </member>
        <member name="M:SGLibrary.Framework.TreeCodeBuilder`1.EachFaceNode(System.Collections.Generic.IEnumerable{`0},System.Int32,System.Int32)">
            <summary>
            迭代此树指定层的所有节点
            </summary>
        </member>
        <member name="M:SGLibrary.Framework.TreeCodeBuilder`1.EachNode(System.Collections.Generic.IEnumerable{`0},System.Int32,System.Int32)">
            <summary>
            迭代节点到指定的层（包含）
            </summary>
        </member>
        <member name="M:SGLibrary.Framework.TreeCodeBuilder`1.GetNewCode(System.String,System.Collections.Generic.IList{`0},System.Int32)">
            <summary>
            尝试获得一个新的子Code
            </summary>
        </member>
        <member name="M:SGLibrary.Framework.ITreeCodeNode`1.EachChild">
            <summary>
            迭代节点的直接子节点
            </summary>
        </member>
        <member name="T:SGLibrary.Framework.SerialCodeMng">
            <summary>
            管理顺序号
            </summary>
        </member>
        <member name="M:SGLibrary.Framework.SerialCodeMng.GetSerialCode(System.String)">
            <summary>
            同类的顺序号: 1，2，3，4....
            用在基础数据等需要读取已有业务数据并判读,预防用户修改导致重复
            </summary>
        </member>
        <member name="M:SGLibrary.Framework.SerialCodeMng.TryGetSerialCode(System.String)">
            <summary>
            利用SQL语句执行的原子性处理并发问题
            </summary>
        </member>
        <member name="M:SGLibrary.Framework.SerialCodeMng.ResetSerialCode(System.String)">
            <summary>
            重置序列号
            </summary>
        </member>
        <member name="T:SGLibrary.Framework.Log.SimpleLogImpl_SysEvent">
            <summary>
            写到系统事件中去，注意默认状态Web应用是没有写系统事件的权限的，
            需要改变应用程序池的设置
            </summary>
        </member>
        <member name="T:SGLibrary.Framework.GridBind.GridBindColumnMngImplV1`1">
            <summary>
            正式的实现
            </summary>
        </member>
        <member name="M:SGLibrary.Framework.GridBind.GridBindColumnMngImplV1`1.GetColumnAndPropertyMaps(System.Int32)">
            <summary>
            获得指定业务场景下属性与列的映射关系
            </summary>
        </member>
        <member name="T:SGLibrary.Framework.Criterion.WhereCtlCodeCb_String">
            <summary>
            字符串代码查询条件，字符串代码不可为空
            </summary>
        </member>
        <member name="F:SGLibrary.Framework.Criterion.WhereCtlCodeCb_String.components">
            <summary> 
            Required designer variable.
            </summary>
        </member>
        <member name="M:SGLibrary.Framework.Criterion.WhereCtlCodeCb_String.Dispose(System.Boolean)">
            <summary> 
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:SGLibrary.Framework.Criterion.WhereCtlCodeCb_String.InitializeComponent">
            <summary> 
            Required method for Designer support - do not modify 
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="T:SGLibrary.Framework.Criterion.WhereNodeNull">
            <summary>
            判断字段是否为null
            </summary>
        </member>
        <member name="P:SGLibrary.Framework.Criterion.WhereNodeNull.Compare">
            <summary>
            比较符
            </summary>
        </member>
        <member name="M:SGLibrary.Extend.INormalGenerator.Next(System.Int32,System.Int32)">
            <summary>
            获取一个符合正态分布的随机值，minValue&lt;=返回值&lt;maxValue
            </summary>
        </member>
        <member name="T:SGLibrary.Extend.NormalGenerator_2">
            <summary>
            正态分布
            </summary>
        </member>
        <member name="M:SGLibrary.Extend.NormalGenerator_2.Next(System.Int32,System.Int32)">
            <summary>
            获取一个符合正态分布的随机值，minValue&lt;=返回值&lt;maxValue
            </summary>
        </member>
        <member name="T:SGLibrary.Extend.NormalGenerator_3">
            <summary>
            gaussian random number generator
            高斯分布随机数发生器（正态分布）
            </summary>
        </member>
        <member name="M:SGLibrary.Extend.NormalGenerator_3.nextBak">
            <summary>
            这个算法有问题的
            </summary>
        </member>
        <member name="M:SGLibrary.Extend.NormalGenerator_3.NextDouble">
            <summary>
            这个算法有问题的
            </summary>
        </member>
        <member name="M:SGLibrary.Extend.NormalGenerator_3.Next(System.Int32,System.Int32)">
            <summary>
            获取一个符合正态分布的随机值，minValue&lt;=返回值&lt;maxValue
            </summary>
        </member>
        <member name="T:SGLibrary.Extend.ExClone">
            <summary>
            同名同类型属性比较与复制，使用反射并缓存之
            </summary>
        </member>
        <member name="M:SGLibrary.Extend.ExClone.GetPropertyMapPackage``2">
            <summary>
            获取转换的映射描述，使用了缓存
            </summary>
        </member>
        <member name="M:SGLibrary.Extend.ExClone.CopyProperty``2(``0,``1,System.String[])">
            <summary>
            复制所有同名同类型值(浅克隆)
            只读属性可以写到对应的可写属性中
            </summary>
        </member>
        <member name="M:SGLibrary.Extend.ExClone.CompProperty``2(``0,``1,System.String[])">
            <summary>
            比较所有同名同类型值(浅克隆)
            包括只读属性
            </summary>
        </member>
        <member name="M:SGLibrary.Extend.ExClone.ListPropertyDifferent``2(``0,``1,System.String[])">
            <summary>
            获取所有同名同类型值的变化(浅克隆)
            包括只读属性
            </summary>
        </member>
        <member name="T:SGLibrary.Extend.ExBuildListWithHexChar">
            <summary>
                把IList组合成等长的16进制串以及反向的拆解
            </summary>
        </member>
        <member name="T:SGLibrary.Extend.DB.MicrosoftOledbXls">
            <summary>
            需要Mircrosoft.ace.oledb.12.0驱动以便使用Ace访问Excel
            </summary>
        </member>
        <member name="F:SGLibrary.Extend.DB.MicrosoftOledbXls.FilterDatabaseName">
            <summary>
            隐含Sheet
            </summary>
        </member>
        <member name="M:SGLibrary.Extend.DB.MicrosoftOledbXls.ListExcelSheets_Ace(System.String)">
            <summary>
            使用Ace列出Excel文件的所有Sheet, 注意返回的有"FilterDatabase"结尾的隐含Sheet
            </summary>
        </member>
        <member name="M:SGLibrary.Extend.DB.MicrosoftOledbXls.ListExcelSheets_Jet(System.String)">
            <summary>
            使用Jet列出Excel文件的所有Sheet, 注意返回的有"FilterDatabase"结尾的隐含Sheet
            </summary>
        </member>
        <member name="M:SGLibrary.Extend.DB.MicrosoftOledbXls.LoadExcelData_Ace(System.String,System.String)">
            <summary>
            使用Act装载Excel的数据
            </summary>
        </member>
        <member name="M:SGLibrary.Extend.DB.MicrosoftOledbXls.LoadExcelData_Jet(System.String,System.String)">
            <summary>
            使用Jet装载Excel的数据
            </summary>
        </member>
        <member name="F:SGLibrary.Extend.ControlEx.InputStringFm.components">
            <summary>
            必需的设计器变量。
            </summary>
        </member>
        <member name="M:SGLibrary.Extend.ControlEx.InputStringFm.Dispose(System.Boolean)">
            <summary>
            清理所有正在使用的资源。
            </summary>
            <param name="disposing">如果应释放托管资源，为 true；否则为 false。</param>
        </member>
        <member name="M:SGLibrary.Extend.ControlEx.InputStringFm.InitializeComponent">
            <summary>
            设计器支持所需的方法 - 不要
            使用代码编辑器修改此方法的内容。
            </summary>
        </member>
        <member name="M:SGLibrary.Extend.ControlEx.InputStringFm.GetInputString(System.String,System.String,System.Char)">
            <summary>
            不显示*则用(Char)0
            </summary>
            <param name="title">标题</param>
        </member>
        <member name="T:SGLibrary.Extend.IdObjectSet`1">
            <summary>
            通过Id识别的对象集合，不会保存null
            </summary>
        </member>
        <member name="T:SGLibrary.Framework.GridBind.GridBindColumnMngImplV0`1">
            <summary>
            这是一个简单的实现,没有处理业务场景
            </summary>
        </member>
        <member name="T:SGLibrary.Framework.Criterion.WhereNodeBoolean">
            <summary>
            Boolean查询条件
            </summary>
        </member>
        <member name="M:SGLibrary.Framework.Criterion.WhereNodeBoolean.#ctor(System.String,System.Boolean)">
            <summary>
            等于
            </summary>
        </member>
        <member name="P:SGLibrary.Framework.Criterion.WhereNodeBoolean.Compare">
            <summary>
            比较符
            </summary>
        </member>
        <member name="M:SGLibrary.Extend.EfficientDict`2.GetDict(System.Int32)">
            <summary>
            根据size获得合适高效的Dictionary
            </summary>
        </member>
        <member name="T:SGLibrary.Extend.EfficientDict`2.ListDict">
            <summary>
            对小数据量，正常的Dictionary太慢了
            </summary>
        </member>
        <member name="T:SGLibrary.Extend.HashSet20`1">
            <summary>
            .net 2.0中无HashSet，这是一个代用类
            </summary>
        </member>
        <member name="M:SGLibrary.Extend.HashSet20`1.Remove(`0)">
            <summary>
            如果t不存在，return false
            </summary>
        </member>
        <member name="M:SGLibrary.Extend.HashSet20`1.Overlaps(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            存在交集，other不可为空
            </summary>
        </member>
        <member name="M:SGLibrary.Extend.HashSet20`1.IntersectWith(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            得到交集，other不可为空 
            </summary>
        </member>
        <member name="M:SGLibrary.Extend.HashSet20`1.UnionWith(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            得到并集，other不可为空 
            </summary>
        </member>
        <member name="M:SGLibrary.Extend.ExGZip.SerializerObject(System.Object)">
            <summary>  
            序列化Object并压缩，被序列化Object需要使用[Serializable]
            </summary>  
        </member>
        <member name="M:SGLibrary.Extend.ExGZip.DeserializeObject(System.Byte[])">
            <summary>  
            反序列化压缩的Object  
            </summary>  
        </member>
        <member name="T:SGLibrary.Extend.DB.DbCrud">
            <summary>
            DB的增删改查
            </summary>
        </member>
        <member name="F:SGLibrary.Extend.DB.DbCrud.Unknown">
            <summary>
            未知(留给对方处理)
            </summary>
        </member>
        <member name="F:SGLibrary.Extend.DB.DbCrud.Create">
            <summary>
            添加
            </summary>
        </member>
        <member name="F:SGLibrary.Extend.DB.DbCrud.Delete">
            <summary>
            删除
            </summary>
        </member>
        <member name="F:SGLibrary.Extend.DB.DbCrud.Update">
            <summary>
            更新
            </summary>
        </member>
        <member name="F:SGLibrary.Extend.DB.DbCrud.Retrieve">
            <summary>
            查询
            </summary>
        </member>
        <member name="T:SGLibrary.Extend.ControlEx.ShadowButton">
            <summary>
            带阴影的按钮
            </summary>
        </member>
        <member name="F:SGLibrary.Extend.ControlEx.ShadowButton.components">
            <summary> 
            Required designer variable.
            </summary>
        </member>
        <member name="M:SGLibrary.Extend.ControlEx.ShadowButton.Dispose(System.Boolean)">
            <summary> 
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:SGLibrary.Extend.ControlEx.ShadowButton.InitializeComponent">
            <summary> 
            Required method for Designer support - do not modify 
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="M:SGLibrary.Framework.FunTreeNode.Clone">
            <summary>
            深Clone
            </summary>
        </member>
        <member name="M:SGLibrary.Framework.FunTreeNode.IsEnabled(System.Int32)">
            <summary>
            此bizScene下此节点是否有效，特别注意如果创建树则节点是否有效还要取决于其子节点
            </summary>
        </member>
        <member name="P:SGLibrary.Framework.FunTreeNode.Id">
            <summary>
            Id = 0 是虚的
            </summary>
        </member>
        <member name="P:SGLibrary.Framework.FunTreeNode.Name">
            <summary>
            type.Name/fieldInfo.Name
            </summary>
        </member>
        <member name="P:SGLibrary.Framework.ConstNodeAttribute.Text">
            <summary>
            文本
            </summary>
        </member>
        <member name="T:SGLibrary.Framework.Criterion.WhereControlPanel">
            <summary>
            支持条件记忆的查询条件控件容器，容器中的查询条件必须指定不同且非空的BindProperty
            </summary>
        </member>
        <member name="M:SGLibrary.Framework.Criterion.WhereControlPanel.DoQuery">
            <summary>
            执行查询
            </summary>
        </member>
        <member name="F:SGLibrary.Framework.Criterion.WhereControlPanel.components">
            <summary> 
            Required designer variable.
            </summary>
        </member>
        <member name="M:SGLibrary.Framework.Criterion.WhereControlPanel.Dispose(System.Boolean)">
            <summary> 
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:SGLibrary.Framework.Criterion.WhereControlPanel.InitializeComponent">
            <summary> 
            Required method for Designer support - do not modify 
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="P:SGLibrary.Framework.Criterion.WhereControlPanel.QuerySleep">
            <summary>
            查询时让程序反应钝一点，使用户形成查询需要代价的潜意识。单位毫秒
            </summary>
        </member>
        <member name="E:SGLibrary.Framework.Criterion.WhereControlPanel.Query">
            <summary>
            查询事件
            </summary>
        </member>
        <member name="P:SGLibrary.Framework.Criterion.WhereControlPanel.DefaultResults">
            <summary>
            默认返回数据行
            </summary>
        </member>
        <member name="E:SGLibrary.Framework.Criterion.WhereControlPanel.QueryExceptionHandler">
            <summary>
            执行查询发生错误
            </summary>
        </member>
        <member name="P:SGLibrary.Framework.Criterion.WhereControlPanel.WhereRem">
            <summary>
            记忆查询条件
            </summary>
        </member>
        <member name="E:SGLibrary.Framework.Criterion.WhereControlPanel.BeforeSaveRemWhere">
            <summary>
            保存查询条件前，可以用来处理自定义查询控件的记忆
            </summary>
        </member>
        <member name="E:SGLibrary.Framework.Criterion.WhereControlPanel.AfterLoadRemWhere">
            <summary>
            装入查询条件后，可以用来处理自定义查询控件的记忆
            </summary>
        </member>
        <member name="T:SGLibrary.Framework.Criterion.WhereNodeStringIn">
            <summary>
            字符串In查询条件
            </summary>
        </member>
        <member name="M:SGLibrary.Framework.Criterion.WhereNodeStringIn.#ctor(System.String,System.String[])">
            <summary>
            At values
            </summary>
        </member>
        <member name="M:SGLibrary.Framework.Criterion.WhereNodeStringIn.#ctor(System.String,System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            At values
            </summary>
        </member>
        <member name="P:SGLibrary.Framework.Criterion.WhereNodeStringIn.Compare">
            <summary>
            比较符
            </summary>
        </member>
        <member name="T:SGLibrary.Framework.Config.HibernateConnConfig">
            <summary>
            读写hibernate.cfg.xml中的数据库连接串
            </summary>
        </member>
        <member name="M:SGLibrary.Extend.ExWinFm.FindShowMdiChild(System.Windows.Forms.Form,System.Type)">
            <summary>
            找已经显示的 mdiChildType 类型的MdiChildFm，没找到返回null
            </summary>
        </member>
        <member name="M:SGLibrary.Extend.ExWinFm.FindShowMdiChild``1(System.Windows.Forms.Form)">
            <summary>
            找已经显示的 T 类型的MdiChildFm，没找到返回null
            </summary>
        </member>
        <member name="M:SGLibrary.Extend.ExWinFm.FindMdiParent(System.Windows.Forms.Form)">
            <summary>
            找MdiContainer，包括sender
            </summary>
        </member>
        <member name="M:SGLibrary.Extend.ExWinFm.GetSinglerMdiChildFm``1(System.Windows.Forms.Form)">
            <summary>
            获取 T 类型的MdiChildFm，如已存在激活,否则新建
            FormBorderStyle == Fixed则ShowDialog
            </summary>
        </member>
        <member name="M:SGLibrary.Extend.ExWinFm.GetSinglerMdiChildFm(System.Windows.Forms.Form,System.Type,System.Boolean)">
            <summary>
            获取 mdiChildType 类型的MdiChildFm，如已存在激活,否则新建(mdiChildType必须有无参构造函数)
            FormBorderStyle == Fixed则ShowDialog
            </summary>
        </member>
        <member name="M:SGLibrary.Extend.ExWinFm.StartProcess(System.String)">
            <summary>
            启动某进程，可以用于程序重启
            </summary>
        </member>
        <member name="M:SGLibrary.Extend.ExWinFm.ResetCloseReason(System.Windows.Forms.Form)">
            <summary>
            Form.FormClosing事件所传递的e.CloseReason有Bug，需要在事件中重置(不影响e)
            </summary>
        </member>
        <member name="M:SGLibrary.Extend.ExDrawing.DrawBorder_3D_Protruding(System.Drawing.Rectangle,System.Drawing.Graphics)">
            <summary>
            突起的边框
            </summary>
        </member>
        <member name="M:SGLibrary.Extend.ExDrawing.DrawBorder_3D_Concave(System.Drawing.Rectangle,System.Drawing.Graphics)">
            <summary>
            凹陷的边框
            </summary>
        </member>
        <member name="T:SGLibrary.Extend.AnchorQueue`1">
            <summary>
            一个限制容量的List
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="P:SGLibrary.Framework.ORM.OrmPropertyAttribute.Title">
            <summary>
            在表格上显示时的Title，自动生成表时会作为字段的描述
            </summary>
        </member>
        <member name="P:SGLibrary.Framework.ORM.OrmPropertyAttribute.Sequence">
            <summary>
            在表格上显示时默认的顺序
            </summary>
        </member>
        <member name="P:SGLibrary.Framework.ORM.OrmPropertyAttribute.Width">
            <summary>
            在表格上显示时默认的宽度
            </summary>
        </member>
        <member name="T:SGLibrary.Framework.ORM.OrmPKAttribute">
            <summary>
            注意IsCustomerBuild决定谁负责构建
            </summary>
        </member>
        <member name="P:SGLibrary.Framework.ORM.OrmPKAttribute.IsCustomerBuild">
            <summary>
            调用者提供,否则由数据库或DAC层自动生成，包括自增字段、Guid字段(DAC层负责生成)
            </summary>
        </member>
        <member name="P:SGLibrary.Framework.ORM.OrmPKAttribute.OracleSequenceName">
            <summary>
            默认为TableName + "_PKSeq"
            默认触发器为TableName + "_PKTrigger"
            </summary>
        </member>
        <member name="F:SGLibrary.Framework.ORM.OrmValueKind.Common">
            <summary>
            默认普通字段，属性类型与数据库相对应
            </summary>
        </member>
        <member name="F:SGLibrary.Framework.ORM.OrmValueKind.OnlyDate">
            <summary>
            日期，无时间
            </summary>
        </member>
        <member name="F:SGLibrary.Framework.ORM.OrmValueKind.Money">
            <summary>
            金额，会自动处理右对齐、小数位
            </summary>
        </member>
        <member name="F:SGLibrary.Framework.ORM.OrmValueKind.Memo">
            <summary>
            属性是字符串，表中是备注
            </summary>
        </member>
        <member name="F:SGLibrary.Framework.ORM.OrmValueKind.ByteArray">
            <summary>
            属性是字节数组，表中是image
            </summary>
        </member>
        <member name="F:SGLibrary.Framework.ORM.OrmValueKind.AllowCutStr">
            <summary>
            无关紧要的字符串，允许把超过字段长度的截去
            </summary>
        </member>
        <member name="T:SGLibrary.Framework.ORM.OrmJoinKeyAttribute">
            <summary>
            关联到其它表的字段
            </summary>
        </member>
        <member name="P:SGLibrary.Framework.ORM.OrmJoinKeyAttribute.JoinToEntity">
            <summary>
            join的Orm实体
            </summary>
        </member>
        <member name="P:SGLibrary.Framework.ORM.OrmJoinKeyAttribute.JoinToPropertyName">
            <summary>
            join到目标实体的哪一个属性（不一定join到PK），缺省联接到PK
            </summary>
        </member>
        <member name="T:SGLibrary.Framework.ORM.OrmJoinValueAttribute">
            <summary>
            从其它表查看回来的字段
            </summary>
        </member>
        <member name="P:SGLibrary.Framework.ORM.OrmJoinValueAttribute.JoinKeyPropertyName">
            <summary>
            本实体类的哪个属性完成外连接(OrmJoinKeyAttribute的属性)
            </summary>
        </member>
        <member name="P:SGLibrary.Framework.ORM.OrmJoinValueAttribute.JoinToPropertyName">
            <summary>
            映射到目标实体的哪一个属性，缺省联接到同名属性
            </summary>
        </member>
        <member name="T:SGLibrary.Framework.Criterion.WhereCtlStringMultiattribute">
            <summary>
            多字段包含查询条件，默认为包含，注意效率；Bind为用','分隔的字符串
            </summary>
        </member>
        <member name="F:SGLibrary.Framework.Criterion.WhereCtlStringMultiattribute.components">
            <summary> 
            Required designer variable.
            </summary>
        </member>
        <member name="M:SGLibrary.Framework.Criterion.WhereCtlStringMultiattribute.Dispose(System.Boolean)">
            <summary> 
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:SGLibrary.Framework.Criterion.WhereCtlStringMultiattribute.InitializeComponent">
            <summary> 
            Required method for Designer support - do not modify 
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="M:SGLibrary.Extend.ExControl.GetControlParentForm(System.Windows.Forms.Control)">
            <summary>
            找到参数ctl所在的窗体
            </summary>
        </member>
        <member name="M:SGLibrary.Extend.ExControl.ParentOf(System.Object,System.Windows.Forms.Control)">
            <summary>
            测试Parent是否是obj的容器
            </summary>
        </member>
        <member name="M:SGLibrary.Extend.ExControl.GetTopBrotherCtlAtPoint(System.Windows.Forms.Control)">
            <summary>
            找到当前鼠标位置下与参数ctl在同一窗体的顶层控件
            </summary>
        </member>
        <member name="P:SGLibrary.Extend.ExComponentModel.DesignMode">
            <summary>
            是否DesignMode，UserControl嵌套时被嵌套UserControl.DesignMode总是false
            用户控件嵌套，使用此方法VS2010经常发生SGPub加载错误，建议转移到本地
            </summary>
        </member>
        <member name="F:ExportProcedure.MainFm.components">
            <summary>
            設計工具所需的變數。
            </summary>
        </member>
        <member name="M:ExportProcedure.MainFm.Dispose(System.Boolean)">
            <summary>
            清除任何使用中的資源。
            </summary>
            <param name="disposing">如果應該處置 Managed 資源則為 true，否則為 false。</param>
        </member>
        <member name="M:ExportProcedure.MainFm.InitializeComponent">
            <summary>
            此為設計工具支援所需的方法 - 請勿使用程式碼編輯器
            修改這個方法的內容。
            </summary>
        </member>
        <member name="T:SGLibrary.Extend.ExDict`2">
            <summary>
                为Dictionary&lt;TKey, TValue&gt;添加更方便的构造函数
            </summary>
        </member>
        <member name="T:SGLibrary.Trick.CollectionCompare`1">
            <summary>
            比较两个集合决定那些新增，那些需要删除
            </summary>
        </member>
        <member name="T:SGLibrary.Trick.CollectionCompare_Recover`1">
            <summary>
            比较两个集合决定那些新增，那些需要删除，那些可以复用
            </summary>
        </member>
        <member name="T:SGLibrary.Trick.CollectionRecover`1">
            <summary>
            元素复用器
            </summary>
        </member>
        <member name="M:SGLibrary.Trick.CollectionRecover`1.AddToWillBeAdd(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            会自动更新可复用的
            </summary>
        </member>
        <member name="M:SGLibrary.Trick.CollectionRecover`1.AddToWillBeRemoved(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            会自动更新可复用的
            </summary>
        </member>
        <member name="P:SGLibrary.Framework.ORM.OrmEntityAttribute.Description">
            <summary>
            自动生成表时会作为表的描述
            </summary>
        </member>
        <member name="T:SGLibrary.Framework.Criterion.WhereCtlCodeCb_Tree">
            <summary>
            树结构编码查询条件
            </summary>
        </member>
        <member name="F:SGLibrary.Framework.Criterion.WhereCtlCodeCb_Tree.components">
            <summary> 
            Required designer variable.
            </summary>
        </member>
        <member name="M:SGLibrary.Framework.Criterion.WhereCtlCodeCb_Tree.Dispose(System.Boolean)">
            <summary> 
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:SGLibrary.Framework.Criterion.WhereCtlCodeCb_Tree.InitializeComponent">
            <summary> 
            Required method for Designer support - do not modify 
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="T:SGLibrary.Framework.Criterion.WhereNodeIntMultiattribute">
            <summary>
            多字段查询条件
            处理如age1 = @a or age2 = @a, Bind为用','分隔的字符串
            </summary>
        </member>
        <member name="M:SGLibrary.Framework.Criterion.WhereNodeIntMultiattribute.#ctor(System.String,System.Int64)">
            <summary>
            多字段查询条件，默认等于
            处理如age1 = @a or age2 = @a, Bind为用','分隔的字符串
            </summary>
        </member>
        <member name="M:SGLibrary.Framework.Criterion.WhereNodeIntMultiattribute.#ctor(System.String,System.Int64,System.Int64)">
            <summary>
            包含端点的区间
            </summary>
        </member>
        <member name="P:SGLibrary.Framework.Criterion.WhereNodeIntMultiattribute.Compare">
            <summary>
            比较符
            </summary>
        </member>
        <member name="P:SGLibrary.Framework.Criterion.WhereNodeIntMultiattribute.CompareValue">
            <summary>
            Equal、UnEqual使用此属性
            </summary>
        </member>
        <member name="P:SGLibrary.Framework.Criterion.WhereNodeIntMultiattribute.CompareValueLow">
            <summary>
            StartsWith、Contains使用
            </summary>
        </member>
        <member name="P:SGLibrary.Framework.Criterion.WhereNodeIntMultiattribute.CompareValueTop">
            <summary>
            EndsWith、Contains使用
            </summary>
        </member>
        <member name="T:SGLibrary.Framework.Criterion.WhereListApply">
            <summary>
            用来处理跨Web Service、从控件获取查询条件、查询条件记忆
            </summary>
        </member>
        <member name="M:SGLibrary.Extend.ExSafe.BuileMD5Password(System.String,System.String,System.String)">
            <summary>
            获取一个掺过盐的MD5(32个16进制字符)，以阻止彩虹表
            </summary>
        </member>
        <member name="M:SGLibrary.Extend.ExSafe.GetMD5(System.String)">
            <summary>
            获取MD5签名(32个16进制字符)
            </summary>
        </member>
        <member name="M:SGLibrary.Extend.ExSafe.DESEncrypt(System.String,System.String,System.Security.Cryptography.CipherMode,System.Byte[])">
            <summary>
            CipherMode: ECB/CBC，Java默认为ECB
            key长度前8有效，IV可空
            </summary>
        </member>
        <member name="M:SGLibrary.Extend.ExSafe.DESDecryptor(System.String,System.String,System.Security.Cryptography.CipherMode,System.Byte[])">
            <summary>
            CipherMode: ECB/CBC，Java默认为ECB
            key长度前8有效，IV可空
            </summary>
        </member>
        <member name="M:SGLibrary.Extend.ExSafe.DomainUserIsAuthenticated(System.String,System.String,System.String,System.String)">
            <summary>
            域身份验证，执行此方法的机器不需要在域中
            </summary>
            <param name="domainAddress">如：LDAP://192.168.150.168</param>
            <param name="username">不需要域名前缀</param>
        </member>
        <member name="M:SGLibrary.Extend.ExSafe.DomainUserIsAuthenticated_MSDN(System.String,System.String,System.String,System.String)">
            <summary>
            域身份验证，执行此方法的机器不需要在域中
            方法抄袭于MSDN
            </summary>
            <param name="domainAddress">如：LDAP://192.168.150.168</param>
            <param name="username">不需要域名前缀</param>
        </member>
        <member name="M:SGLibrary.Extend.ExRandom.GetRandomArr(System.Int32)">
            <summary>
            获得一个由0--count -1的数以随机顺序构成的数组
            </summary>
        </member>
        <member name="M:SGLibrary.Extend.ExRandom.Next(System.Int32)">
            <summary>
            获取一个大于等于0，小于maxValue的值
            </summary>
        </member>
        <member name="M:SGLibrary.Extend.ExRandom.Next(System.Int32,System.Int32)">
            <summary>
            获取一个大于等于minValue，小于maxValue的值
            </summary>
        </member>
        <member name="T:SGLibrary.Extend.ExBuildListWithSplt`1">
            <summary>
                把IList组合成用Spliter分隔的串以及反向的拆解,仅处理值类型
            </summary>
        </member>
        <member name="F:SGLibrary.Extend.Ex.cEntter">
            <summary>
            注意从WebService返回的多行串是用\n分隔的
            推荐使用 Environment.NewLine
            </summary>
        </member>
        <member name="M:SGLibrary.Extend.Ex.ToStr(System.Object)">
            <summary>
            null返回null
            </summary>
        </member>
        <member name="M:SGLibrary.Extend.Ex.IsDefault(System.Object)">
            <summary>
            DateTime.MinValue\Guid.Empty
            </summary>
        </member>
        <member name="M:SGLibrary.Extend.Ex.CompareValue(System.Object,System.Object)">
            <summary>
            通用的比较，返回x1-x2：左边小返回负
            </summary>
        </member>
        <member name="P:SGLibrary.Extend.Ex.DesignMode">
            <summary>
            是否DesignMode，UserControl嵌套时被嵌套UserControl.DesignMode总是false
            </summary>
        </member>
        <member name="M:SGLibrary.Extend.DB.ExSql.GetTopSQLStr(System.Int32)">
            <summary>
            获取设置返回记录数的SQL子句
            </summary>
        </member>
        <member name="M:SGLibrary.Extend.DB.ExSql.GetToDateSql(System.String)">
            <summary>
            拼SQL用
            </summary>
        </member>
        <member name="M:SGLibrary.Extend.DB.ExSql.getDateTimeToStrSql(System.String)">
            <summary>
            SQL中取年/月/日用(在SQL中把日期时间字段转为字符串)
            </summary>
        </member>
        <member name="T:SGLibrary.Extend.ControlEx.MinuteSecond">
            <summary>
            分秒输入
            </summary>
        </member>
        <member name="F:SGLibrary.Extend.ControlEx.MinuteSecond.components">
            <summary> 
            必需的设计器变量。
            </summary>
        </member>
        <member name="M:SGLibrary.Extend.ControlEx.MinuteSecond.Dispose(System.Boolean)">
            <summary> 
            清理所有正在使用的资源。
            </summary>
            <param name="disposing">如果应释放托管资源，为 true；否则为 false。</param>
        </member>
        <member name="M:SGLibrary.Extend.ControlEx.MinuteSecond.InitializeComponent">
            <summary> 
            设计器支持所需的方法 - 不要
            使用代码编辑器修改此方法的内容。
            </summary>
        </member>
        <member name="T:SGLibrary.Framework.FunTree`1">
            <summary>
            构建功能树
            </summary>
        </member>
        <member name="M:SGLibrary.Framework.FunTree`1.GetTree">
            <summary>
            获取树
            </summary>
        </member>
        <member name="M:SGLibrary.Framework.FunTree`1.BuileConstTree(System.Type,System.Int32[],System.Collections.Generic.IDictionary{System.Type,SGLibrary.Framework.FunTreeNode},System.Collections.Generic.IDictionary{System.Int32,SGLibrary.Framework.FunTreeNode})">
            <summary>
            构建树，Id与Description的对应关系会加入descriptDict，将被递归调用，所以传type
            </summary>
        </member>
        <member name="M:SGLibrary.Framework.FunTree`1.GetTreeNode(System.Int32)">
            <summary>
            根据常量Id，获取节点
            </summary>
        </member>
        <member name="M:SGLibrary.Framework.FunTree`1.GetTreeNode(System.Type)">
            <summary>
            根据类型，获取节点
            </summary>
        </member>
        <member name="T:SGLibrary.Framework.GridBind.AttributeProviderOrmProperty2GridBindColumn">
            <summary>
            ORM2GridBind的桥接
            </summary>
        </member>
        <member name="T:SGLibrary.Framework.Criterion.WhereCtlBoolean">
            <summary>
            Boolean查询条件
            </summary>
        </member>
        <member name="F:SGLibrary.Framework.Criterion.WhereCtlBoolean.components">
            <summary> 
            Required designer variable.
            </summary>
        </member>
        <member name="M:SGLibrary.Framework.Criterion.WhereCtlBoolean.Dispose(System.Boolean)">
            <summary> 
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:SGLibrary.Framework.Criterion.WhereCtlBoolean.InitializeComponent">
            <summary> 
            Required method for Designer support - do not modify 
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="F:SGLibrary.Framework.Criterion.BooleanCompare.Invalid">
            <summary>
            无效值
            </summary>
        </member>
        <member name="F:SGLibrary.Framework.Criterion.BooleanCompare.IsTrue">
            <summary>
            真
            </summary>
        </member>
        <member name="F:SGLibrary.Framework.Criterion.BooleanCompare.IsFalse">
            <summary>
            假
            </summary>
        </member>
        <member name="F:SGLibrary.Framework.Criterion.StringCompare.Invalid">
            <summary>
            无效值
            </summary>
        </member>
        <member name="F:SGLibrary.Framework.Criterion.StringCompare.Equal">
            <summary>
            等于
            </summary>
        </member>
        <member name="F:SGLibrary.Framework.Criterion.StringCompare.Contains">
            <summary>
            包含
            </summary>
        </member>
        <member name="F:SGLibrary.Framework.Criterion.StringCompare.UnEqual">
            <summary>
            不等于
            </summary>
        </member>
        <member name="F:SGLibrary.Framework.Criterion.StringCompare.StartsWith">
            <summary>
            起始为
            </summary>
        </member>
        <member name="F:SGLibrary.Framework.Criterion.StringCompare.EndsWith">
            <summary>
            结尾为
            </summary>
        </member>
        <member name="F:SGLibrary.Framework.Criterion.StringCompare.IsNull">
            <summary>
            为null或空串
            </summary>
        </member>
        <member name="F:SGLibrary.Framework.Criterion.StringCompare.IsNotNull">
            <summary>
            不为null及空串
            </summary>
        </member>
        <member name="F:SGLibrary.Framework.Criterion.ValueCompare.Invalid">
            <summary>
            无效值
            </summary>
        </member>
        <member name="F:SGLibrary.Framework.Criterion.ValueCompare.Equal">
            <summary>
            等于
            </summary>
        </member>
        <member name="F:SGLibrary.Framework.Criterion.ValueCompare.UnEqual">
            <summary>
            不等于
            </summary>
        </member>
        <member name="F:SGLibrary.Framework.Criterion.ValueCompare.StartsWith">
            <summary>
            大于
            </summary>
        </member>
        <member name="F:SGLibrary.Framework.Criterion.ValueCompare.Contains">
            <summary>
            介于两者间
            </summary>
        </member>
        <member name="F:SGLibrary.Framework.Criterion.ValueCompare.EndsWith">
            <summary>
            小于
            </summary>
        </member>
        <member name="F:SGLibrary.Framework.Criterion.DateCompare.Invalid">
            <summary>
            无效值
            </summary>
        </member>
        <member name="F:SGLibrary.Framework.Criterion.DateCompare.CompareByNow">
            <summary>
            相对时间
            </summary>
        </member>
        <member name="F:SGLibrary.Framework.Criterion.DateCompare.Equal">
            <summary>
            等于
            </summary>
        </member>
        <member name="F:SGLibrary.Framework.Criterion.DateCompare.UnEqual">
            <summary>
            不等于
            </summary>
        </member>
        <member name="F:SGLibrary.Framework.Criterion.DateCompare.StartsWith">
            <summary>
            大于
            </summary>
        </member>
        <member name="F:SGLibrary.Framework.Criterion.DateCompare.Contains">
            <summary>
            介于两者间
            </summary>
        </member>
        <member name="F:SGLibrary.Framework.Criterion.DateCompare.EndsWith">
            <summary>
            小于
            </summary>
        </member>
        <member name="F:SGLibrary.Framework.Criterion.CodeCompare_Value.Invalid">
            <summary>
            无效值
            </summary>
        </member>
        <member name="F:SGLibrary.Framework.Criterion.CodeCompare_Tree.Invalid">
            <summary>
            无效值
            </summary>
        </member>
        <member name="F:SGLibrary.Framework.Criterion.CodeCompare_Tree.Equal">
            <summary>
            等于
            </summary>
        </member>
        <member name="F:SGLibrary.Framework.Criterion.CodeCompare_Tree.Include">
            <summary>
            包含于
            </summary>
        </member>
        <member name="F:SGLibrary.Framework.Criterion.CodeCompare_Tree.UnInclude">
            <summary>
            不包含于
            </summary>
        </member>
        <member name="F:SGLibrary.Framework.Criterion.AtCompare.Invalid">
            <summary>
            无效值
            </summary>
        </member>
        <member name="T:SGLibrary.Framework.Criterion.DateCompareByNow">
            <summary>
            日期相对条件
            </summary>
        </member>
        <member name="F:SGLibrary.Framework.Criterion.DateCompareByNow.Today">
            <summary>
            今天
            </summary>
        </member>
        <member name="F:SGLibrary.Framework.Criterion.DateCompareByNow.Yesterday">
            <summary>
            昨天
            </summary>
        </member>
        <member name="F:SGLibrary.Framework.Criterion.DateCompareByNow.ThisWeek">
            <summary>
            本周
            </summary>
        </member>
        <member name="F:SGLibrary.Framework.Criterion.DateCompareByNow.LastWeek">
            <summary>
            上周
            </summary>
        </member>
        <member name="F:SGLibrary.Framework.Criterion.DateCompareByNow.ThisMonth">
            <summary>
            本月
            </summary>
        </member>
        <member name="F:SGLibrary.Framework.Criterion.DateCompareByNow.LastMonth">
            <summary>
            上月
            </summary>
        </member>
        <member name="F:SGLibrary.Framework.Criterion.DateCompareByNow.ThisYear">
            <summary>
            本年
            </summary>
        </member>
        <member name="F:SGLibrary.Framework.Criterion.DateCompareByNow.LastYear">
            <summary>
            上年
            </summary>
        </member>
        <member name="F:SGLibrary.Framework.Criterion.DateCompareByNow.ForAWeek">
            <summary>
            一周以来
            </summary>
        </member>
        <member name="F:SGLibrary.Framework.Criterion.DateCompareByNow.ForAMonth">
            <summary>
            一月以来
            </summary>
        </member>
        <member name="F:SGLibrary.Framework.Criterion.DateCompareByNow.ForAYear">
            <summary>
            一年以来
            </summary>
        </member>
        <member name="P:SGLibrary.Framework.Criterion.WhereEventArgs.ResultCount">
            <summary>
            执行查询后将返回的记录数填入此属性
            </summary>
        </member>
        <member name="T:SGLibrary.Framework.Criterion.WhereContentAlignment">
            <summary>
            对齐方式
            </summary>
        </member>
        <member name="M:SGLibrary.Extend.EfficientHashSet`1.GetHashSet(System.Int32)">
            <summary>
            根据size获得合适高效的HashSet
            </summary>
        </member>
        <member name="T:SGLibrary.Extend.EfficientHashSet`1.ListHashSet">
            <summary>
            对小数据量，正常的HashSet或Dictionary都太慢了
            </summary>
        </member>
        <member name="M:SGLibrary.Extend.EfficientHashSet`1.ListHashSet.Overlaps(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            存在交集，other不可为空
            </summary>
        </member>
        <member name="M:SGLibrary.Extend.EfficientHashSet`1.ListHashSet.IntersectWith(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            得到交集，other不可为空 
            </summary>
        </member>
        <member name="M:SGLibrary.Extend.EfficientHashSet`1.ListHashSet.UnionWith(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            得到并集，other不可为空 
            </summary>
        </member>
        <member name="T:SGLibrary.Extend.Permutations">
            <summary>
            排列
            </summary>
        </member>
        <member name="M:SGLibrary.Extend.ExControlTab.SetTabIndex(System.Windows.Forms.Control.ControlCollection)">
            <summary>
              从左到右，从上到下地整理控件的Tab
              不处理子容器中的
            </summary>
        </member>
        <member name="M:SGLibrary.Extend.ExControlTab.ToNextTab(System.Windows.Forms.Control,System.Boolean)">
            <summary>
               跳转到NextTab
            </summary>
        </member>
        <member name="M:SGLibrary.Extend.ExControlTab.EachSonCotrols(System.Windows.Forms.Control.ControlCollection)">
            <summary>
            递归地
            </summary>
        </member>
        <member name="M:SGLibrary.Extend.ExControlTab.EnterKeyDownToNextTab(System.Object,System.Windows.Forms.KeyEventArgs)">
            <summary>
            回车跳转到下一控件(整个Form)
            </summary>
        </member>
        <member name="T:SGLibrary.Extend.DB.DbConnProviderImpl_MSAccessOleDB">
            <summary>
            用于MSAccess，问题多多
            记得加如下语句保证Access的关闭：
            Application.ApplicationExit += DBConnProvider_MSAccessOleDB.Close;
            在Web应用中当心并发问题
            </summary>
        </member>
        <member name="F:SGLibrary.Extend.DB.DbConnProviderImpl_MSAccessOleDB.ConnStr_JetOLEDB4">
            <summary>
            
            </summary>
        </member>
        <member name="T:SGLibrary.Extend.ControlEx.PictureButton">
            <summary>
            贴图的按钮
            </summary>
        </member>
        <member name="F:SGLibrary.Extend.ControlEx.PictureButton.components">
            <summary> 
            Required designer variable.
            </summary>
        </member>
        <member name="M:SGLibrary.Extend.ControlEx.PictureButton.Dispose(System.Boolean)">
            <summary> 
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:SGLibrary.Extend.ControlEx.PictureButton.InitializeComponent">
            <summary> 
            Required method for Designer support - do not modify 
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="T:SGLibrary.Extend.KeyClassDict`3">
            <summary>
                .Net没有类类型，没办法掰个将就用
                缺点:类必须有无参构造函数
            </summary>
        </member>
        <member name="M:SGLibrary.Extend.KeyClassDict`3.Add(`0,System.Type,`2)">
            <summary>
                通过tag可以保存点与type相关的常量等,方便CreateInstance前后的操作 
            </summary>
        </member>
        <member name="T:SGLibrary.Extend.KeyClassDict`3.Tags">
            <summary>
                C#不能定义任意的索引器,只能这样别扭着
            </summary>
        </member>
        <member name="T:SGLibrary.Framework.EntityClone">
            <summary>
            根据属性/字段复制实体，是否深Clone?
            </summary>
        </member>
        <member name="T:SGLibrary.Framework.Criterion.WhereNodeCode_Guid">
            <summary>
            Guid Code查询条件
            </summary>
        </member>
        <member name="M:SGLibrary.Framework.Criterion.WhereNodeCode_Guid.#ctor(System.String,System.Guid)">
            <summary>
            等于
            </summary>
        </member>
        <member name="P:SGLibrary.Framework.Criterion.WhereNodeCode_Guid.Compare">
            <summary>
            比较符
            </summary>
        </member>
        <member name="T:SGLibrary.Framework.Config.ConfigImpl_Registry">
            <summary>
            写到注册表中，注意不支持多用户！
            </summary>
        </member>
        <member name="F:SGLibrary.Framework.Config.ConfigImpl_Registry.AutoRunKey">
            <summary>
            自动运行: 
            new ConfigImpl_Registry(Registry.LocalMachine).WriteString(ConfigImpl_Registry.AutoRunKey, "TestAutoRun", Application.ExecutablePath);
            </summary>
        </member>
        <member name="T:SGLibrary.Extend.DoubleKeyDictionary`3">
            <summary>
            双Key的字典
            </summary>
        </member>
        <member name="M:SGLibrary.Extend.ExMath.GetDecimalBit(System.Int64,System.Int32)">
            <summary>
            获取10进制某位的数据,右向左,0起点
            </summary>
        </member>
        <member name="M:SGLibrary.Extend.ExMath.SetDecimalBit(System.Int64,System.Int32,System.Int32)">
            <summary>
            设置10进制某位的数据,右向左,0起点
            </summary>
        </member>
        <member name="M:SGLibrary.Extend.ExMath.CutNumberString(System.String)">
            <summary>
            截取有效的数字字符串
            </summary>
        </member>
        <member name="T:SGLibrary.Extend.ExSunna">
            <summary>
            习惯常量
            </summary>
        </member>
        <member name="F:SGLibrary.Extend.ExSunna.cKeyLen">
            <summary>
            由开发时定义的Key
            </summary>
        </member>
        <member name="F:SGLibrary.Extend.ExSunna.cDescriptionLen">
            <summary>
            正常的描述性属性
            </summary>
        </member>
        <member name="F:SGLibrary.Extend.ExSunna.cValueLen">
            <summary>
            正常的保存各种值的（通常会把各种类型转成字符串）
            </summary>
        </member>
        <member name="F:SGLibrary.Extend.ExSunna.cCommKeyLen">
            <summary>
            程序运行时通过Hascode、name等组合出的Key
            </summary>
        </member>
        <member name="F:SGLibrary.Extend.ExSunna.cCommValueLen">
            <summary>
            允许保存一组值的组合
            </summary>
        </member>
        <member name="M:SGLibrary.Extend.ExIO.MakeReadyDir(System.String)">
            <summary>
               准备目录，传递文件全名（含路径）
            </summary>
        </member>
        <member name="M:SGLibrary.Extend.ExIO.GetFormatDir(System.String)">
            <summary>
               确保目录后面有结尾符\或/，方便拼接
            </summary>
        </member>
        <member name="M:SGLibrary.Extend.ExIO.GetNameFromFileName(System.String)">
            <summary>
               从全名（含路径）获得文件主名
            </summary>
        </member>
        <member name="M:SGLibrary.Extend.ExIO.GetExtFromFileName(System.String)">
            <summary>
               从文件名中获得扩展名
            </summary>
        </member>
        <member name="M:SGLibrary.Extend.ExIO.ChangeNameToFileName(System.String,System.String)">
            <summary>
               改变文件名中name部分
            </summary>
        </member>
        <member name="M:SGLibrary.Extend.ExIO.GetSaveFileName(System.String,System.String,System.String)">
            <summary>
            System.Environment
            System.Windows.Forms.Application.StartupPath 
            System.Reflection.Assembly.GetEntryAssembly().Location 
            </summary>
        </member>
        <member name="M:SGLibrary.Extend.ExApp_WinFm.GetAssistFileName(System.String,System.String)">
            <summary>
                获取项目辅助文件名，文件位于StartupPath，与当前应用程序名相关
            当心host到IIS获取的是IIS进程名，通常没权限写此文件的！
            </summary>
        </member>
        <member name="M:SGLibrary.Extend.ExApp_WinFm.GetFullName">
            <summary>
            获取不包含路径的当前Application全名,包含扩展名
            </summary>
        </member>
        <member name="M:SGLibrary.Extend.DB.DbAccessImpl.NewParameter(System.Data.IDbCommand,System.String,System.Object)">
            <summary>
                特别注意：参数顺序要与SQL中的一致！
            应该是我什么地方出错了，有空再研究
            </summary>
        </member>
        <member name="F:SGLibrary.Extend.ControlEx.SetUrlFm.components">
            <summary>
            必需的设计器变量。
            </summary>
        </member>
        <member name="M:SGLibrary.Extend.ControlEx.SetUrlFm.Dispose(System.Boolean)">
            <summary>
            清理所有正在使用的资源。
            </summary>
            <param name="disposing">如果应释放托管资源，为 true；否则为 false。</param>
        </member>
        <member name="M:SGLibrary.Extend.ControlEx.SetUrlFm.InitializeComponent">
            <summary>
            设计器支持所需的方法 - 不要
            使用代码编辑器修改此方法的内容。
            </summary>
        </member>
        <member name="P:SGLibrary.Framework.ORM.OrmConfig.IsReturnNativeError">
            <summary>
            是否返回原生错误，默认否。
            因为原生错误会透露底层信息，带来安全隐患
            </summary>
        </member>
        <member name="P:SGLibrary.Framework.ORM.OrmConfig.TableName">
            <summary>
            若指定了表名则覆盖OrmEntityAttribute中的指定
            </summary>
        </member>
        <member name="P:SGLibrary.Framework.ORM.OrmConfig.Log">
            <summary>
            DB访问的日志
            </summary>
        </member>
        <member name="P:SGLibrary.Framework.ORM.OrmConfig.OrmInfoMng">
            <summary>
            指定的映射管理器
            </summary>
        </member>
        <member name="F:SGLibrary.Framework.Log.SimpleLogImpl_ShowFm.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:SGLibrary.Framework.Log.SimpleLogImpl_ShowFm.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:SGLibrary.Framework.Log.SimpleLogImpl_ShowFm.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="T:SGLibrary.Framework.Config.ConfigImpl_Configuration">
            <summary>
            在App.config/Web.config中处理配置
            特别注意IIS在默认设置下网络服务是无权限写Web.config的，所以Load方法等同于Read方法
            </summary>
        </member>
        <member name="T:SGLibrary.Extend.PageWhereRem">
            <summary>
            这个类用来记忆页面的查询条件--开发中
            </summary>
        </member>
        <member name="T:SGLibrary.Extend.KeyValue`2">
            <summary>
            使用KeyValuePair更快速
            对TKey为String的，使用ValueText&lt;T&gt;更合适
            </summary>
        </member>
        <member name="M:SGLibrary.Extend.ExUI.GetInputString(System.String,System.String,System.Char)">
            <summary>
            不显示*则用(Char)0
            </summary>
            <param name="title">标题</param>
        </member>
        <member name="T:SGLibrary.Extend.ListFormOperation">
            <summary>
            列表窗体的操作类型
            </summary>
        </member>
        <member name="T:SGLibrary.Extend.IAsynchronousRenewForm">
            <summary>
            能够异步更新的窗体
            </summary>
        </member>
        <member name="T:SGLibrary.Extend.AsynchronousRenewForm">
            <summary>
            处理窗体异步更新
            </summary>
        </member>
        <member name="T:SGLibrary.Extend.ExStringCode">
            <summary>
            字符串编码相关
            </summary>
        </member>
        <member name="F:SGLibrary.Extend.ExStringCode.cEnabledCharInfo">
            <summary>
            有效的字符编码信息
            </summary>
        </member>
        <member name="M:SGLibrary.Extend.ExStringCode.GetNextStringCode(System.String,System.String)">
            <summary>
            获取合适的下一个字符串Code
            AA --> AB; aZ --> bA; Zz --> AAa;  S = null或为空则return defaultValue
            </summary>
        </member>
        <member name="M:SGLibrary.Extend.ExStringCode.ToNextChar(System.Char@)">
            <summary>
            获取下一个编码，返回是否进位
            </summary>
        </member>
        <member name="M:SGLibrary.Extend.ExApp.IsWinFormApp">
            <summary>
            判断是WinApp还是WebApp
            </summary>
        </member>
        <member name="M:SGLibrary.Extend.DB.ExDb.DataTableTranspose(System.Data.DataTable,System.Int32,System.String)">
            <summary>
            DataTable的行列转置
            newClmNameFromOldClmIdx列的值变成列名，列名变成第一列的值，oldClmNameClmName为新的第一列列名
            类似Excel中选择性粘贴，转置
            </summary>
        </member>
        <member name="P:SGLibrary.Extend.DB.ExDb.TransactSqlMinDateTime">
            <summary>
            TransactSql时间之最小值, 小于此数据库出错
            </summary>
        </member>
        <member name="P:SGLibrary.Extend.DB.ExDb.OleDbMinDateTime">
            <summary>
            OleDb时间之最小值, 小于此数据库出错
            </summary>
        </member>
        <member name="T:SGLibrary.Framework.Criterion.WhereNodeYearMonth">
            <summary>
            年月的查询条件，使用'.'分隔年月
            </summary>
        </member>
        <member name="M:SGLibrary.Framework.Criterion.WhereNodeYearMonth.#ctor(System.String,System.DateTime)">
            <summary>
            等于time的年月
            </summary>
        </member>
        <member name="M:SGLibrary.Framework.Criterion.WhereNodeYearMonth.#ctor(System.String,SGLibrary.Extend.YearMonth)">
            <summary>
            等于time的年月
            </summary>
        </member>
        <member name="M:SGLibrary.Framework.Criterion.WhereNodeYearMonth.#ctor(System.String,System.Int32,System.Int32)">
            <summary>
            等于
            </summary>
        </member>
        <member name="M:SGLibrary.Framework.Criterion.WhereNodeYearMonth.#ctor(System.String,System.DateTime,System.DateTime)">
            <summary>
            包含端点
            </summary>
        </member>
        <member name="M:SGLibrary.Framework.Criterion.WhereNodeYearMonth.#ctor(System.String,SGLibrary.Extend.YearMonth,SGLibrary.Extend.YearMonth)">
            <summary>
            包含端点
            </summary>
        </member>
        <member name="M:SGLibrary.Framework.Criterion.WhereNodeYearMonth.#ctor(System.String,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            包含端点
            </summary>
        </member>
        <member name="P:SGLibrary.Framework.Criterion.WhereNodeYearMonth.Compare">
            <summary>
            比较符
            </summary>
        </member>
        <member name="T:SGLibrary.Framework.Criterion.WhereNodeDateTime">
            <summary>
            时间点查询条件
            </summary>
        </member>
        <member name="M:SGLibrary.Framework.Criterion.WhereNodeDateTime.#ctor(System.String,System.DateTime)">
            <summary>
            等于
            </summary>
        </member>
        <member name="M:SGLibrary.Framework.Criterion.WhereNodeDateTime.#ctor(System.String,System.DateTime,System.DateTime)">
            <summary>
            包含端点的区间
            </summary>
        </member>
        <member name="P:SGLibrary.Framework.Criterion.WhereNodeDateTime.Compare">
            <summary>
            比较符
            </summary>
        </member>
        <member name="P:SGLibrary.Framework.Criterion.WhereNodeDateTime.CompareValue">
            <summary>
            Equal、UnEqual使用此属性
            </summary>
        </member>
        <member name="P:SGLibrary.Framework.Criterion.WhereNodeDateTime.CompareValueLow">
            <summary>
            StartsWith、Contains使用
            </summary>
        </member>
        <member name="P:SGLibrary.Framework.Criterion.WhereNodeDateTime.CompareValueTop">
            <summary>
            EndsWith、Contains使用
            </summary>
        </member>
        <member name="T:SGLibrary.Framework.Criterion.WhereNodeCode_Int">
            <summary>
            整型Code的查询条件
            </summary>
        </member>
        <member name="M:SGLibrary.Framework.Criterion.WhereNodeCode_Int.#ctor(System.String,System.Int64)">
            <summary>
            等于
            </summary>
        </member>
        <member name="P:SGLibrary.Framework.Criterion.WhereNodeCode_Int.Compare">
            <summary>
            比较符
            </summary>
        </member>
        <member name="T:SGLibrary.Framework.Config.ConfigImpl_AppConfig">
            <summary>
            处理外部的App.config/Web.config，特别注意不是本程序的
            </summary>
        </member>
        <member name="M:SGLibrary.Extend.YearMonth.#ctor(System.String)">
            <summary>
            使用'.'分隔年月，如'2011.4'
            </summary>
        </member>
        <member name="T:SGLibrary.Extend.WebServiceUrlConfig_Ini">
            <summary>
            没啥用的类
            </summary>
        </member>
        <member name="M:SGLibrary.Extend.ExIIS.EachWebServerAndWebVirtualDir(System.String)">
            <summary>
            获取所有网站及虚拟目录
            root通常："IIS://localhost/w3svc/1/Root"
            1是默认网站的标识
            返回的Key是虚拟目录，Info是本地目录
            </summary>
        </member>
        <member name="M:SGLibrary.Extend.ExIIS.GetWebServer(System.String,System.String)">
            <summary>
            获取指定的物理目录所属的网站/虚拟目录
            root通常："IIS://localhost/w3svc"
            返回的Key是虚拟目录，Info是本地目录
            </summary>
        </member>
        <member name="M:SGLibrary.Extend.ExIIS.GetWebSiteLocalDirectory(System.String)">
            <summary>
            获取一个虚拟目录的本地路径
            </summary>
        </member>
        <member name="M:SGLibrary.Extend.ExIIS.SetWebSiteLocalDirectory(System.String,System.String)">
            <summary>
            变更一个虚拟目录的本地路径
            </summary>
        </member>
        <member name="M:SGLibrary.Extend.ExIIS.GetServerState(System.String)">
            <summary>
            获取虚拟目录的运行状态
            </summary>
        </member>
        <member name="M:SGLibrary.Extend.ExIIS.SetServerState(System.String,SGLibrary.Extend.WebServerState)">
            <summary>
            设置虚拟目录的运行状态
            </summary>
        </member>
        <member name="M:SGLibrary.Extend.ExIIS.VirtualDirExist(System.String)">
            <summary>
            虚拟目录存在
            </summary>
        </member>
        <member name="M:SGLibrary.Extend.ExIIS.GetWebSiteVirtualDirName(System.String)">
            <summary>
            通过站点名获取完整的虚拟目录名, todo
            </summary>
        </member>
        <member name="M:SGLibrary.Extend.ExIIS.CreateWebVirtualDir(System.String)">
            <summary>
            创建一个虚拟目录, todo
            </summary>
        </member>
        <member name="M:SGLibrary.Extend.ExIIS.DeleteWebVirtualDir(System.String)">
            <summary>
            删除一个虚拟目录, todo
            </summary>
        </member>
        <member name="M:SGLibrary.Extend.ExClipboard.VS2010CopyClear">
            <summary>
            点型的剪贴板操作
            </summary>
        </member>
    </members>
</doc>
